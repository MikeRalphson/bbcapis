{
  "swagger": "2.0",
  "info": {
    "title": "Rocket Services",
    "version": "3.730.339-ref-1-39-0",
    "description": "An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications.\nThis in turn makes client integration easier and reduces the complexity and size of front-end applications.\n\nRocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that\nbest suits the application they are developing.\n"
  },
  "basePath": "/api",
  "schemes": [
    "https"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "accountAuth": {
      "type": "oauth2",
      "description": "Account JWT token",
      "flow": "password",
      "tokenUrl": "/account/authorization",
      "scopes": {
        "Catalog": "Access all read only content",
        "Commerce": "Perform account level transactions",
        "Settings": "Modify account settings",
        "Playback": "Allow playback of restricted content"
      }
    },
    "profileAuth": {
      "type": "oauth2",
      "description": "Profile JWT token",
      "flow": "password",
      "tokenUrl": "/account/profile/authorization",
      "scopes": {
        "Catalog": "Modify profile preferences and activity (bookmarks, watch list)"
      }
    },
    "resetPasswordAuth": {
      "type": "apiKey",
      "name": "authorization",
      "in": "header"
    },
    "verifyEmailAuth": {
      "type": "apiKey",
      "name": "authorization",
      "in": "header"
    }
  },
  "paths": {
    "/account": {
      "x-serviceId": "account",
      "get": {
        "description": "Get the details of an account along with the profiles and entitlements under it.",
        "operationId": "getAccount",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      },
      "patch": {
        "description": "Update the details of an account.\n\nWith the exception of the address, this supports partial updates, so you can send just the\nproperties you wish to update.\n\nWhen the address is provided any properties which are omitted from the address will be cleared.\n",
        "operationId": "updateAccount",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "Updated account details.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountUpdateRequest"
            }
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Settings"
            ]
          }
        ]
      }
    },
    "/account/billing/methods": {
      "x-serviceId": "billing",
      "get": {
        "description": "Get the available payment methods under an account.",
        "operationId": "getPaymentMethods",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of available payment methods.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentMethod"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      },
      "post": {
        "description": "Add a new payment method to an account.",
        "operationId": "addPaymentMethod",
        "tags": [
          "account"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "Registration details for a new payment method.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddPaymentMethodRequest"
            }
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "The created payment method.",
            "schema": {
              "$ref": "#/definitions/PaymentMethod"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Commerce"
            ]
          }
        ]
      }
    },
    "/account/billing/methods/{id}": {
      "x-serviceId": "billing",
      "get": {
        "description": "Get a payment method under an account.",
        "operationId": "getPaymentMethod",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The id of the payment method to get.",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "The payment method requested.",
            "schema": {
              "$ref": "#/definitions/PaymentMethod"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      },
      "delete": {
        "description": "Remove a payment method from an account.",
        "operationId": "removePaymentMethod",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The id of the payment method to remove.",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "204": {
            "description": "Payment method removed."
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Commerce"
            ]
          }
        ]
      }
    },
    "/account/billing/purchases": {
      "x-serviceId": "billing",
      "get": {
        "description": "Get a list of all purchases made under an account.",
        "operationId": "getPurchases",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of all purchases made under the account.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Purchase"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Commerce"
            ]
          }
        ]
      },
      "post": {
        "description": "Purchase a plan or item offer.\nThe result of a successful transaction is a new entitlement.\n",
        "operationId": "makePurchase",
        "tags": [
          "account"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "Details of a plan or item purchase.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PurchaseRequest"
            }
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "The entitlement for the purchased plan or item.",
            "schema": {
              "$ref": "#/definitions/Entitlement"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Commerce"
            ]
          }
        ]
      }
    },
    "/account/billing/subscriptions/{id}": {
      "x-serviceId": "billing",
      "put": {
        "description": "Renew a cancelled subscription or switch subscription to a different plan.\n\nWhen renewing a cancelled subscription membership, hit this endpoint with\nthe id of subscription to renew.\n\nTo switch plans provide the id of the current active subscription membership\nof the account, and in the query specify the id of the plan to switch to.\n",
        "operationId": "updateSubscription",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The identifier of the current subscription membership\nassociated with the account.\n",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "planId",
            "description": "The id of the plan to switch to if switching plans.",
            "in": "query",
            "type": "string"
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Commerce"
            ]
          }
        ]
      },
      "delete": {
        "description": "Cancel a plan subscription.\n\nA cancelled subscription will continue to be valid until the subscription\nexpiry date or next renewal date.\n",
        "operationId": "cancelSubscription",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The identifier of the current active subscription membership of the account.\n",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Commerce"
            ]
          }
        ]
      }
    },
    "/account/devices": {
      "x-serviceId": "device",
      "get": {
        "description": "Get all devices registered under this account.\n\nAlso includes information around device registration and deregistration limits.\n",
        "operationId": "getDevices",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountDevices"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      },
      "post": {
        "description": "Register a playback device under an account.\n\nIf a device with the same id already exists a `409` conflict will be returned.\n",
        "operationId": "registerDevice",
        "tags": [
          "account"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "Registration details for a new playback device.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceRegistrationRequest"
            }
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Device"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "409": {
            "description": "A device with the provided id already exists.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/account/devices/{id}": {
      "x-serviceId": "device",
      "get": {
        "description": "Get a registered device.",
        "operationId": "getDevice",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The unique identifier for the registered device e.g. serial number.",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Device"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      },
      "delete": {
        "description": "Deregister a playback device from an account.",
        "operationId": "deregisterDevice",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The unique identifier for the registered device e.g. serial number.",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "204": {
            "description": "Device deregistered."
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/account/devices/{id}/name": {
      "x-serviceId": "device",
      "put": {
        "description": "Rename a device",
        "operationId": "renameDevice",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The unique identifier for this registered device e.g. serial number.",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "name",
            "description": "The new name for the device.",
            "in": "query",
            "type": "string",
            "required": true
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "204": {
            "description": "Device renamed."
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/account/devices/authorization": {
      "x-serviceId": "itvAuth",
      "post": {
        "description": "Authorize a device from a generated device authorization code.\n\nThis is the second step in the process of authorizing a device by pin code.\n\nFirstly the device must request a generated authorization code via the\n`/authorization/device/code` endpoint.\n\nThis endpoint then authorizes the device associated with the code to sign in\nto a user account. Typically this endpoint will be called from a page\npresented in the web app under the account section.\n\nOnce authorized, the device will then be able to sign in to that account\nvia the `/authorization/device` endpoint, without needing to provide the \ncredentials of the user.\n",
        "operationId": "authorizeDevice",
        "tags": [
          "account"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "The generated device authorization code.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceAuthorizationCode"
            }
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/account/entitlements": {
      "x-serviceId": "entitlement",
      "get": {
        "description": "Get all entitlements under the account.\n\nThis list is returned under the call to get account information so a call here is\nonly required when wishing to refresh a local copy of entitlements.\n",
        "operationId": "getEntitlements",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Entitlement"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/account/items/{id}/videos": {
      "x-serviceId": "media",
      "get": {
        "description": "Get the video files associated with an item given maximum resolution, device type\nand one or more delivery types.\n\nThis endpoint accepts an Account Catalog token, however if when requesting\nplayback files you receive an *403 status code with error code 1* then the file\nyou're requesting is classification restricted. This means you should switch\nto target the `/account/items/{id}/videos-guarded` endpoint, passing it an Account\nPlayback token. If not already obtained, this token can be requested via the\n`/itv/pinauthorization` endpoint with an account level pin.\n\nFor convenience you may also access free / public files through this endpoint\ninstead of the /items/{id}/videos endpoint, when authenticated.\n\nReturns an array of video file objects which each include a url to a video.\n\nThe first entry in the array contains what is predicted to be the best match.\nThe remainder of the entries, if any, may contain resolutions below what was\nrequests. For example if you request HD-720 the response may also contain\nSD entries.\n\nIf you specify multiple delivery types, then the response array will insert\ntypes in the order you specify them in the query. For example `stream,progressive`\nwould return an array with 0 or more stream files followed by 0 or more progressive files.\n\nIf no files are found a 404 is returned.\n",
        "operationId": "getItemMediaFiles",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The identifier of the item whose video files to load.",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "$ref": "#/parameters/MediaFileDelivery"
          },
          {
            "$ref": "#/parameters/MediaFileResolution"
          },
          {
            "$ref": "#/parameters/MediaFileFormats"
          },
          {
            "$ref": "#/parameters/Device",
            "required": true
          },
          {
            "$ref": "#/parameters/Subscription"
          },
          {
            "$ref": "#/parameters/Segments"
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of video files available.\nThe first entry containing what is predicted to be the best match.\n",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MediaFile"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/account/items/{id}/videos-guarded": {
      "x-serviceId": "media",
      "get": {
        "description": "Get the video files associated with an item given maximum resolution, device type\nand one or more delivery types.\n\nThis endpoint is identical to the `/account/items/{id}/videos` however it expects\nan Account Playback token. This token, and in association this endpoint, is specifically\nfor use when playback files are classification restricted and require an account\nlevel pin to access them.\n\nReturns an array of video file objects which each include a url to a video.\n\nThe first entry in the array contains what is predicted to be the best match.\nThe remainder of the entries, if any, may contain resolutions below what was\nrequests. For example if you request HD-720 the response may also contain\nSD entries.\n\nIf you specify multiple delivery types, then the response array will insert\ntypes in the order you specify them in the query. For example `stream,progressive`\nwould return an array with 0 or more stream files followed by 0 or more progressive files.\n\nIf no files are found a 404 is returned.\n",
        "operationId": "getItemMediaFilesGuarded",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The identifier of the item whose video files to load.",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "$ref": "#/parameters/MediaFileDelivery"
          },
          {
            "$ref": "#/parameters/MediaFileResolution"
          },
          {
            "$ref": "#/parameters/MediaFileFormats"
          },
          {
            "$ref": "#/parameters/Device",
            "required": true
          },
          {
            "$ref": "#/parameters/Subscription"
          },
          {
            "$ref": "#/parameters/Segments"
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of video files available.\nThe first entry containing what is predicted to be the best match.\n",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MediaFile"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Playback"
            ]
          }
        ]
      }
    },
    "/account/nonce": {
      "x-serviceId": "account",
      "get": {
        "description": "Generate a new account nonce.\n\nA nonce may be required to help sign a response from a third party\nservice which will be passed back to these services.\n\nFor example a Facebook single-sign-on request initiated by a client\napplication may first get a nonce from here to include in the request.\nFacebook will then include the nonce in the auth token it issues. This\ntoken can be passed back to our services and the nonce checked for validity.\n",
        "operationId": "generateNonce",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountNonce"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/account/password": {
      "x-serviceId": "itvPassword",
      "put": {
        "description": "Change the password of an account.\n\nThe expected token scope is Settings.\n",
        "operationId": "changePassword",
        "tags": [
          "account"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The new account password & ITV profile token.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangePasswordRequest"
            }
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Settings"
            ]
          }
        ]
      }
    },
    "/account/pin": {
      "x-serviceId": "itvAccount",
      "put": {
        "description": "Change the pin of an account.",
        "operationId": "changePin",
        "tags": [
          "account"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "The new account pin.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangePinRequest"
            }
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Settings"
            ]
          }
        ]
      }
    },
    "/account/profile": {
      "x-serviceId": "profile",
      "get": {
        "description": "Get the details of the active profile, including watched, bookmarked and rated items.",
        "operationId": "getProfile",
        "tags": [
          "profile"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the active profile.",
            "schema": {
              "$ref": "#/definitions/ProfileDetail"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "profileAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/account/profile/bookmarks": {
      "x-serviceId": "itvNightwatch",
      "get": {
        "description": "Get the map of bookmarked item ids (itemId => creationDate) under the active profile.",
        "operationId": "getBookmarks",
        "tags": [
          "profile"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "profileAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/account/profile/bookmarks/list": {
      "x-serviceId": "itvNightwatch",
      "get": {
        "description": "Returns the list of bookmarked items under the active profile.",
        "operationId": "getBookmarkList",
        "tags": [
          "profile"
        ],
        "parameters": [
          {
            "name": "page",
            "description": "The page of items to load. Starts from page 1.",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "minimum": 1
          },
          {
            "name": "page_size",
            "description": "The number of items to return in a page.",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 50
          },
          {
            "$ref": "#/parameters/ListOrder",
            "description": "The 'date-added' sort order of the returned list, either 'asc' or 'desc'."
          },
          {
            "$ref": "#/parameters/ItemType"
          },
          {
            "$ref": "#/parameters/Device"
          },
          {
            "$ref": "#/parameters/Subscription"
          },
          {
            "$ref": "#/parameters/Segments"
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of items requested.",
            "schema": {
              "$ref": "#/definitions/ItemList"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "profileAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/account/profile/bookmarks/{itemId}": {
      "x-serviceId": "itvNightwatch",
      "get": {
        "description": "Get the bookmark for an item under the active profile.",
        "operationId": "getItemBookmark",
        "tags": [
          "profile"
        ],
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "type": "string",
            "description": "The id of the item to get the bookmark for.",
            "required": true
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Bookmark"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "profileAuth": [
              "Catalog"
            ]
          }
        ]
      },
      "put": {
        "description": "Bookmark an item under the active profile.\n\nCreates one if it doesn't exist, overwrites one if it does.\n",
        "operationId": "bookmarkItem",
        "tags": [
          "profile"
        ],
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "type": "string",
            "description": "The id of the item to bookmark.",
            "required": true
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "Bookmark created.",
            "schema": {
              "$ref": "#/definitions/Bookmark"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "profileAuth": [
              "Catalog"
            ]
          }
        ]
      },
      "delete": {
        "description": "Unbookmark an item under the active profile.",
        "operationId": "deleteItemBookmark",
        "tags": [
          "profile"
        ],
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "type": "string",
            "description": "The identifier of the bookmark to delete.",
            "required": true
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "204": {
            "description": "Bookmark deleted."
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "profileAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/account/profile/continue-watching/list": {
      "x-serviceId": "itvNightwatch",
      "get": {
        "description": "Returns a list of items which have been watched but not completed under the active\nprofile.\n\nMultiple episodes under the same show may be watched or in progress, however only a\nsingle item belonging to a particular show will be included in the returned list.\n\nThe next episode to continue watching for a particular show will be the most recent\nincompletely watched episode, or the next episode following the most recently\ncompletely watched episode. Based on the specified `show_item_type` type, either the next\nepisode, the season of the next episode, or the show will be included in the list.\n",
        "operationId": "getContinueWatchingList",
        "tags": [
          "profile"
        ],
        "parameters": [
          {
            "name": "cw_item_type",
            "description": "Only items of mentioned item type will be returned for continue watching row.\n\nIf `episode` is specified, then only the next episodes to continue watching for\nshows will be returned.\n\nIf `program` is specified, then only programs will be returned.\n\nIf `movie` is specified, then only films will be returned\n\nThis parameter will be ignored if `cwi` featureFlag is not enabled\n",
            "in": "query",
            "type": "string",
            "enum": [
              "episode",
              "program",
              "movie"
            ],
            "default": "episode"
          },
          {
            "name": "show_item_type",
            "description": "The item type to be returned for continue watching items belonging to a show.\n\nMultiple episodes under the same show may be watched or in progress, however only a\nsingle item belonging to a particular show will be included in the returned list.\n\nThe next episode to continue watching for a particular show will be the most recent\nincompletely watched episode, or the next episode following the most recently\ncompletely watched episode. Based on the specified `show_item_type` type, either the next\nepisode, the season of the next episode, or the show will be included in the list.\n\nIf `episode` is specified, then only the next episode to continue watching for a\nshow will be returned.\n\nIf `season` is specified, then only the season of the next episode will be returned.\n\nIf `show` is specified, then only the show of the next episode will be returned\n\nThe recommended value of this parameter should reflect the desitination the\nuser will be sent to when they select this item in the list. So if a user will\nbe sent to the show detail page then this should be `show` and you can use\nthe `include` parameter to get metadata about the episode or season if needed\n",
            "in": "query",
            "type": "string",
            "enum": [
              "episode",
              "season",
              "show"
            ],
            "default": "episode"
          },
          {
            "name": "include",
            "description": "Include one opr more ancestor/children for items belonging to a show. Extra items\nwill be populated in the `listData` property of the list\n\nIf no value is specified no dependencies are included.\n\nIf `episode` is specified, then the next episode will be added for season/show\nitems. Has no effect if `show_item_type` is set to `episode`.\n\nIf `season` is specified, then the season of the next episode will be added for\nepisode/show items. Has no effect if `show_item_type` is set to `season`.\n\nIf `show` is specified, then the show of the next episode will be added for\nepisode/season items. Has no effect if `show_item_type` is set to `show`.\n",
            "in": "query",
            "type": "array",
            "collectionFormat": "csv",
            "default": [],
            "items": {
              "type": "string",
              "enum": [
                "episode",
                "season",
                "show"
              ]
            }
          },
          {
            "name": "page",
            "description": "The page of items to load. Starts from page 1.",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1
          },
          {
            "name": "page_size",
            "description": "The number of items to return in a page.",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "default": 12,
            "minimum": 1,
            "maximum": 50
          },
          {
            "name": "max_rating",
            "in": "query",
            "type": "string",
            "description": "The maximum rating (inclusive) of an item returned, e.g. 'auoflc-pg'."
          },
          {
            "$ref": "#/parameters/Device"
          },
          {
            "$ref": "#/parameters/Subscription"
          },
          {
            "$ref": "#/parameters/Segments"
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of items requested.",
            "schema": {
              "$ref": "#/definitions/ItemList"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "profileAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/account/profile/continue-watching/{itemId}": {
      "x-serviceId": "itvNightwatch",
      "delete": {
        "description": "Excludes an item from continue-watching rail. Resume points remain in all other rails.\nTo undo save actual playback position using PUT /account/profile/watched/{itemId}.\n",
        "operationId": "excludeFromContinueWatchingList",
        "tags": [
          "profile"
        ],
        "parameters": [
          {
            "name": "itemId",
            "description": "The id of the item to be excluded.",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "$ref": "#/parameters/Segments"
          }
        ],
        "responses": {
          "204": {
            "description": "Excluded."
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "profileAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/account/profile/items/{itemId}/next": {
      "x-serviceId": "itvNightwatch",
      "get": {
        "description": "Returns the next item to play given a source item id.\n\nFor an unwatched show it returns the first episode available to the account.\n\nFor a watched show it returns the last incompletely watched episode by the profile,\nor the episode that immediately follows the last completely watched episode \nor nothing.\n\nFor an episode it always returns the immediately following episode, if available to\nthe account, or nothing.\n\nIf the response does not contain a `next` property then no item was found.\n",
        "operationId": "getNextPlaybackItem",
        "tags": [
          "profile"
        ],
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "type": "string",
            "description": "The identifier of the source item to base the next to watch item off.\n",
            "required": true
          },
          {
            "name": "max_rating",
            "in": "query",
            "type": "string",
            "description": "The maximum rating (inclusive) of an item returned, e.g. 'auoflc-pg'."
          },
          {
            "name": "expand",
            "description": "If no value is specified no dependencies are expanded.\n\nIf 'parent' is specified then only the direct parent will be expanded.\nFor example if an `Episode` then the `Season` would be included.\n\nIf 'ancestors' is specified then the full parent chain is expanded.\nFor example if an `Episode` then both the `Season` and `Show` would be included.\n",
            "in": "query",
            "type": "string",
            "enum": [
              "parent",
              "ancestors"
            ]
          },
          {
            "$ref": "#/parameters/Device"
          },
          {
            "$ref": "#/parameters/Subscription"
          },
          {
            "$ref": "#/parameters/Segments"
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "The detail of the next item to play.",
            "schema": {
              "$ref": "#/definitions/NextPlaybackItem"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "profileAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/account/profile/items/{itemId}/previous": {
      "x-serviceId": "itvNightwatch",
      "get": {
        "description": "Returns the previous item to play given a source item id.\n\nFor episode/special it returns the previous episode/special from current season,\nor from previous nearest season where available episode/special is found.\nor nothing.\n\nIf the response does not contain a `previous` property then no item was found.\n",
        "operationId": "getPreviousPlaybackItem",
        "tags": [
          "profile"
        ],
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "type": "string",
            "description": "The identifier of the source item to base the previous item.\n",
            "required": true
          },
          {
            "name": "max_rating",
            "in": "query",
            "type": "string",
            "description": "The maximum rating (inclusive) of an item returned, e.g. 'auoflc-pg'."
          },
          {
            "name": "expand",
            "description": "If no value is specified no dependencies are expanded.\n\nIf 'parent' is specified then only the direct parent will be expanded.\nFor example if an `Episode` then the `Season` would be included.\n\nIf 'ancestors' is specified then the full parent chain is expanded.\nFor example if an `Episode` then both the `Season` and `Show` would be included.\n",
            "in": "query",
            "type": "string",
            "enum": [
              "parent",
              "ancestors"
            ]
          },
          {
            "$ref": "#/parameters/Device"
          },
          {
            "$ref": "#/parameters/Subscription"
          },
          {
            "$ref": "#/parameters/Segments"
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "The detail of the previous item to play.",
            "schema": {
              "$ref": "#/definitions/NextPlaybackItem"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "profileAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/account/profile/ratings": {
      "x-serviceId": "userRating",
      "get": {
        "description": "Get the map of rated item ids (itemId => rating out of 10) under the active profile.",
        "operationId": "getRatings",
        "tags": [
          "profile"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "profileAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/account/profile/ratings/list": {
      "x-serviceId": "userRating",
      "get": {
        "description": "Returns the list of rated items under the active profile.",
        "operationId": "getRatingsList",
        "tags": [
          "profile"
        ],
        "parameters": [
          {
            "name": "page",
            "description": "The page of items to load. Starts from page 1.",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1
          },
          {
            "name": "page_size",
            "description": "The number of items to return in a page.",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "default": 12,
            "minimum": 1,
            "maximum": 50
          },
          {
            "$ref": "#/parameters/ListOrder"
          },
          {
            "name": "order_by",
            "description": "What to order by.\n\nOrdering by `date-modified` equates to ordering by the last rated date.\n",
            "in": "query",
            "type": "string",
            "enum": [
              "date-added",
              "date-modified"
            ],
            "default": "date-added"
          },
          {
            "$ref": "#/parameters/ItemType"
          },
          {
            "$ref": "#/parameters/Device"
          },
          {
            "$ref": "#/parameters/Subscription"
          },
          {
            "$ref": "#/parameters/Segments"
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of items requested.",
            "schema": {
              "$ref": "#/definitions/ItemList"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "profileAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/account/profile/ratings/{itemId}": {
      "x-serviceId": "userRating",
      "get": {
        "description": "Get the rating info for an item under the active profile.",
        "operationId": "getItemRating",
        "tags": [
          "profile"
        ],
        "parameters": [
          {
            "name": "itemId",
            "description": "The id of the item to get the rating info for.",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserRating"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "profileAuth": [
              "Catalog"
            ]
          }
        ]
      },
      "put": {
        "description": "Rate an item under the active profile.\n\nCreates one if it doesn't exist, overwrites one if it does.\n",
        "operationId": "rateItem",
        "tags": [
          "profile"
        ],
        "parameters": [
          {
            "name": "itemId",
            "description": "The id of the item to rate.",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "rating",
            "description": "The item rating between 1 and 10 inclusive.",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "required": true,
            "minimum": 1,
            "maximum": 10
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "$ref": "#/definitions/UserRating"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "profileAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/account/profile/watched": {
      "x-serviceId": "itvNightwatch",
      "get": {
        "description": "Get the map of watched item ids (itemId => last playhead position) under the active profile.",
        "operationId": "getWatched",
        "tags": [
          "profile"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/Watched"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "profileAuth": [
              "Catalog"
            ]
          }
        ]
      },
      "delete": {
        "description": "Remove the watched status of items under the active profile. Passing in\nspecific `itemId`s to the `item_ids` query parameter will cause only these\nitems to be removed. **If this list is missing all watched items will be\nremoved**\n",
        "operationId": "deleteWatched",
        "tags": [
          "profile"
        ],
        "parameters": [
          {
            "name": "item_ids",
            "description": "List of `itemId`s to delete. Omit this parameter to delete all items\n",
            "in": "query",
            "type": "array",
            "collectionFormat": "csv",
            "minItems": 1,
            "items": {
              "description": "itemId to delete",
              "type": "string",
              "minLength": 1
            }
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "204": {
            "description": "Watched statuses deleted."
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "profileAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/account/profile/watched/list": {
      "x-serviceId": "itvNightwatch",
      "get": {
        "description": "Returns the list of watched items under the active profile.",
        "operationId": "getWatchedList",
        "tags": [
          "profile"
        ],
        "parameters": [
          {
            "name": "page",
            "description": "The page of items to load. Starts from page 1.",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1
          },
          {
            "name": "page_size",
            "description": "The number of items to return in a page.",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "default": 12,
            "minimum": 1,
            "maximum": 50
          },
          {
            "name": "completed",
            "description": "Filter by whether an item has been fully watched (completed) or not.\n\nIf `undefined` then both partially and fully watched items are returned.\n",
            "in": "query",
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/ListOrder"
          },
          {
            "name": "order_by",
            "description": "What to order by.\n\nOrdering by `date-modified` equates to ordering by the last watched date.\n",
            "in": "query",
            "type": "string",
            "enum": [
              "date-added",
              "date-modified"
            ],
            "default": "date-added"
          },
          {
            "$ref": "#/parameters/ItemType"
          },
          {
            "$ref": "#/parameters/Device"
          },
          {
            "$ref": "#/parameters/Subscription"
          },
          {
            "$ref": "#/parameters/Segments"
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of items requested.",
            "schema": {
              "$ref": "#/definitions/ItemList"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "profileAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/account/profile/watched/{itemId}": {
      "x-serviceId": "itvNightwatch",
      "get": {
        "description": "Get the watched status info for an item under the active profile.",
        "operationId": "getItemWatchedStatus",
        "tags": [
          "profile"
        ],
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "type": "string",
            "description": "The id of the item to get the watched status for.",
            "required": true
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Watched"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "profileAuth": [
              "Catalog"
            ]
          }
        ]
      },
      "put": {
        "description": "Record the watched playhead position of a video under the active profile.\n\nCan be used later to resume a video from where it was last watched.\n\nCreates one if it doesn't exist, overwrites one if it does.\n",
        "operationId": "setItemWatchedStatus",
        "tags": [
          "profile"
        ],
        "parameters": [
          {
            "name": "itemId",
            "description": "The id of the item being watched.",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "position",
            "description": "The playhead position to record.",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "required": true,
            "minimum": 0
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "$ref": "#/definitions/Watched"
            }
          },
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "profileAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/account/profiles": {
      "x-serviceId": "profile",
      "post": {
        "description": "Create a new profile under the active account.",
        "operationId": "createProfile",
        "tags": [
          "account"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "Profile details.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProfileCreationRequest"
            }
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "201": {
            "description": "Details of the created profile.",
            "schema": {
              "$ref": "#/definitions/ProfileDetail"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/account/profiles/{id}": {
      "x-serviceId": "profile",
      "get": {
        "description": "Get the summary of a profile with a specific id under the active account.",
        "operationId": "getProfileWithId",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The identifier of the profile to return.",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProfileSummary"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      },
      "patch": {
        "description": "Update the summary of a profile with a specific id under the active account.\n\nThis supports partial updates so you can send just the properties you wish to update.\n",
        "operationId": "updateProfileWithId",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The identifier of the profile to update.",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "body",
            "description": "Updated profile details.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProfileUpdateRequest"
            }
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "204": {
            "description": "Profile updated."
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete a profile with a specific id under the active account.\n\nNote that you cannot delete the primary profile.\n",
        "operationId": "deleteProfileWithId",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The identifier of the profile to delete.",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "204": {
            "description": "Profile deleted."
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/account/request-email-verification": {
      "x-serviceId": "account",
      "post": {
        "description": "Request that the email address tied to an account be verified.\n\nThis will send a verification email to the email address of the primary profile containing\na link which, once clicked, completes the verification process via the /verify-email endpoint.\n\nNote that when an account is created this email is sent automatically so there's no need\nto call this directly.\n\nIf the user doesn't click the link before it expires then this endpoint can be called\nto request a new verification email. In the future it may also be used if we add support\nfor changing an account email address.\n",
        "operationId": "requestEmailVerification",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/authorization": {
      "x-serviceId": "itvAuth",
      "post": {
        "description": "Request one or more `Account` level authorization tokens each with a chosen scope.\n\nTokens are used to access restricted service endpoints. These restricted endpoints\nwill require a specific token type (e.g Account) with a specific scope (e.g. Catalog)\nbefore access is granted.\n\nFor convenience, where a Profile level token with the same scope exists it will also be returned.\n\nAuthorization with pin is not supported on this endpoint anymore. Use `/itv/pinauthorization`\nendpoint instead.\n",
        "operationId": "getAccountToken",
        "tags": [
          "authorization"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "The account credentials with requested token scope.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountTokenRequest"
            }
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "additionalProperties": false,
              "items": {
                "$ref": "#/definitions/AccessToken"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      },
      "delete": {
        "description": "When a user signs out of an application we need to clear some\nbasic cookies we assigned them during token authorization.\n",
        "operationId": "signOut",
        "tags": [
          "authorization"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/authorization/device": {
      "x-serviceId": "itvAuth",
      "post": {
        "description": "Get Catalog tokens for an account using a device authorization code.\nWhere a Profile level token of Catalog scope exists it will also be returned.\n\nThis is the final step in the process of authorizing a device by pin code.\n\nFirstly the device must request a generated authorization code via the\n`/authorization/device/code` endpoint.\n\nThe code is subsequently used to authorize the device to sign in to a given\naccount via the `/account/devices/authorization` endpoint. Typically this\nwill be from a page presented in the web app under the account section.\n\nOnce authorized, this endpoint will allow the device to sign in without\nneeding to provide the credentials of the user.\n",
        "operationId": "getAccountTokenByCode",
        "tags": [
          "authorization"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "The device id e.g. serial number and authorization code.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountTokenByCodeRequest"
            }
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "additionalProperties": false,
              "items": {
                "$ref": "#/definitions/AccessToken"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/authorization/device/code": {
      "x-serviceId": "itvAuth",
      "post": {
        "description": "Get a generated device authorization code.\n\nThis is the first step in the process of authorizing a device by pin code.\nThe device will make a request to this endpoint providing a unique identifier\nfor the device such as a serial number. This endpoint will then return a\ngenerated code which is tied to the given device.\n\nThe code may subsequently be used to authorize the device to sign in to an\naccount via the `/account/devices/authorization` endpoint. Typically this\nwill be from a page presented in the web app under the account section.\n\nOnce authorized, the device will then be able to sign in to that account\nvia the `/authorization/device` endpoint, without needing to provide the \ncredentials of the user.\n",
        "operationId": "generateDeviceAuthorizationCode",
        "tags": [
          "authorization"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "Details of the device being authorized.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceRegistrationRequest"
            }
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeviceAuthorizationCode"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/authorization/profile": {
      "x-serviceId": "itvAuth",
      "post": {
        "description": "Request one or more `Profile` level authorization tokens each with a chosen scope.\n\nTokens are used to access restricted service endpoints. These restriced endpoints\nwill require a specific token type (e.g Profile) with a specific scope (e.g. Catalog)\nbefore access is granted.\n",
        "operationId": "getProfileToken",
        "tags": [
          "authorization"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "The profile id and optional pin with required token scope.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProfileTokenRequest"
            }
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "additionalProperties": false,
              "items": {
                "$ref": "#/definitions/AccessToken"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/authorization/refresh": {
      "x-serviceId": "itvAuth",
      "post": {
        "description": "Refresh an account or profile level authorization token which is marked as refreshable.",
        "operationId": "refreshToken",
        "tags": [
          "authorization"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "The token to refresh.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TokenRefreshRequest"
            }
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccessToken"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/authorization/sso": {
      "x-serviceId": "auth",
      "post": {
        "description": "Exchange a third party single-sign-on token for our own authorization tokens.",
        "operationId": "singleSignOn",
        "tags": [
          "authorization"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "A single-sign-on request.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SingleSignOnRequest"
            }
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "additionalProperties": false,
              "items": {
                "$ref": "#/definitions/AccessToken"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Unauthorized.\n\nError codes:\n  - 6000: Unknown or default error code.\n  - 6001: An account with the same email already exists but it's not linked to this social identity.\n  - 6002: The social provider token provided is invalid.\n  - 6003: The account is already linked to a different account with the same provider.\n  - 6004: The user data returned from the social provider is missing the email address.\n",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/bt/plan/{token}": {
      "x-serviceId": "itvBt",
      "get": {
        "description": "Returns all the plans available for BT flow including additional description data.",
        "operationId": "getPlanByToken",
        "tags": [
          "bt"
        ],
        "parameters": [
          {
            "name": "token",
            "description": "The identifier of the user provided by BT in an initial URL.",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "Available plan for current user.",
            "schema": {
              "$ref": "#/definitions/BtPlanListItem"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/bt/plans": {
      "x-serviceId": "itvBt",
      "get": {
        "description": "Returns all the plans available for BT flow including additional description data.",
        "operationId": "getPlans",
        "tags": [
          "bt"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "List of available plans.",
            "schema": {
              "$ref": "#/definitions/BtPlans"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/bt/token/assign": {
      "x-serviceId": "itvBt",
      "post": {
        "description": "Assigns an UserToken to a profile on the ITV side. Currently throws an exception.",
        "operationId": "assignToken",
        "tags": [
          "bt"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of an assign request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItvAssignBtTokenRequest"
            }
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "201": {
            "description": "OK"
          },
          "401": {
            "description": "User unknown"
          },
          "500": {
            "description": "Failure",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/bt/token/validate": {
      "x-serviceId": "itvBt",
      "get": {
        "description": "Checks a provided token for BT eligible user.\n",
        "operationId": "checkUserToken",
        "tags": [
          "bt"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "User token provided by BT.",
            "in": "request",
            "type": "string",
            "required": true
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "The token is eligeble for BT."
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/check-subscription/{id}": {
      "x-serviceId": "itvSubscription",
      "get": {
        "description": "Returns the details of subscription data for a user with specified id.",
        "operationId": "getSubscriptionData",
        "tags": [
          "support"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "description": "The identifier of the user to load.\n",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The data requested",
            "schema": {
              "$ref": "#/definitions/SubscriptionDetails"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/config": {
      "x-serviceId": "itvConfig",
      "get": {
        "description": "Get the global configuration for an application. Should be called during app statup.\n\nThis includes things like device and playback rules, classifications,\nsitemap and subscriptions.\n\nYou have the option to select specific configuration objects using the 'include'\nparameter, or if unspecified, getting all configuration.\n",
        "operationId": "getAppConfig",
        "tags": [
          "app"
        ],
        "parameters": [
          {
            "name": "include",
            "description": "A comma delimited list of config objects to return.\nIf none specified then all configuration is returned.\n",
            "in": "query",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "classification",
                "playback",
                "sitemap",
                "navigation",
                "subscription",
                "general",
                "display",
                "i18n",
                "linear"
              ]
            },
            "collectionFormat": "csv"
          },
          {
            "name": "system",
            "description": "Classification system to load in case include = classification.\n",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Device"
          },
          {
            "$ref": "#/parameters/Subscription"
          },
          {
            "$ref": "#/parameters/Segments"
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of available pages",
            "schema": {
              "$ref": "#/definitions/AppConfig"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/diagnostic/heap-report": {
      "x-serviceId": "diagnostic",
      "post": {
        "description": "Creates Heap report for a given rocket instance\n",
        "operationId": "createHeapReport",
        "tags": [
          "heapReport"
        ],
        "parameters": [
          {
            "name": "key",
            "description": "The security key to prevent unathorized use of endpoint.",
            "in": "query",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/diagnostic/heap-snapshot": {
      "x-serviceId": "diagnostic",
      "post": {
        "description": "Creates heap snapshot for a given rocket instance, snapshot is generated within /tmp directory \n",
        "operationId": "createHeapSnapshot",
        "tags": [
          "heapSnapshot"
        ],
        "parameters": [
          {
            "name": "key",
            "description": "The security key to prevent unathorized use of endpoint.",
            "in": "query",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/diagnostic/report": {
      "x-serviceId": "diagnostic",
      "post": {
        "description": "Creates diagnostic report for a given rocket instance\n",
        "operationId": "createDiagnosticReport",
        "tags": [
          "diagnosticReport"
        ],
        "parameters": [
          {
            "name": "key",
            "description": "The security key to prevent unathorized use of endpoint.",
            "in": "query",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/ee/msisdn": {
      "x-serviceId": "itvEe",
      "post": {
        "description": "Assigns a msisdn to a profile on ITV side.",
        "operationId": "assignMsisdn",
        "tags": [
          "ee"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of an assign request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItvAssignMsisdnRequest"
            }
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "201": {
            "description": "OK"
          },
          "401": {
            "description": "User unknown"
          },
          "500": {
            "description": "Failure",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/ee/offers": {
      "x-serviceId": "eeOffers",
      "post": {
        "description": "Returns eligible partner specific offers for the querying partner for an EE MSISDN.\nThis call is supposed to be called after we have MSISDN accired.\nThis call should be followed by POST /ee/msisdn.\n",
        "operationId": "getEligibleOffers",
        "tags": [
          "ee"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "Data for getting the eligible offers.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EeOffersRequest"
            }
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of eligible offers value.",
            "schema": {
              "$ref": "#/definitions/EeOffersResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/ee/pin": {
      "x-serviceId": "eeCredentials",
      "put": {
        "description": "Creates a PIN request that will send an SMS to the given msisdn.\nThis call is to validate MSISDN entered by a user not comming through EE network.\nThis call should be followed by POST ee/pin.\n",
        "operationId": "createPinRequest",
        "tags": [
          "ee"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "Data for creating the PIN request.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EeCreatePinRequest"
            }
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "The PIN reference value.",
            "schema": {
              "$ref": "#/definitions/EeCreatePinResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      },
      "post": {
        "description": "Validate PIN request created by calling POST /ee/pin This call is to validate MSISDN entered by a user not comming through EE network. This call should be called after PUT /ee/pin. This call should be followed by POST /ee/offers.",
        "operationId": "validatePinRequest",
        "tags": [
          "ee"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "Data for validating PIN.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EeValidatePinRequest"
            }
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "The validation status - success.",
            "schema": {
              "$ref": "#/definitions/EeValidatePinResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/ee/plans": {
      "x-serviceId": "itvEe",
      "get": {
        "description": "Returns all the plans available for EE flow including additional description data.",
        "operationId": "getPlans",
        "tags": [
          "ee"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "List of available plans.",
            "schema": {
              "$ref": "#/definitions/EePlans"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/ee/plans/{id}": {
      "x-serviceId": "itvEe",
      "get": {
        "description": "Returns the plan description for EE flow including additional description data.",
        "operationId": "getPlan",
        "tags": [
          "ee"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "description": "The identifier of the plan received from ee/offers.",
            "required": true
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "List of available plans.",
            "schema": {
              "$ref": "#/definitions/EePlanListItem"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/ee/token/create": {
      "x-serviceId": "eeAuth",
      "get": {
        "description": "Returns a token for later calls to EE API. TTL is one hour. Recommended is FE refreshes this token before each call.",
        "operationId": "createToken",
        "tags": [
          "ee"
        ],
        "responses": {
          "200": {
            "description": "The token.",
            "schema": {
              "$ref": "#/definitions/EeCreateTokenResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/ee-bt/eligibility": {
      "x-serviceId": "itvSubscription",
      "get": {
        "description": "Check whether or not a user is eligible for switching to Bt or EE offers.",
        "operationId": "checkEeBtEligibility",
        "tags": [
          "ee",
          "bt"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "Success, returns eligibility data.",
            "schema": {
              "$ref": "#/definitions/EeBtEligibility"
            }
          },
          "406": {
            "description": "Customer does not exist."
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/items/{id}": {
      "x-serviceId": "item",
      "get": {
        "description": "Returns the details of an item with the specified id.",
        "operationId": "getItem",
        "tags": [
          "content"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "description": "The identifier of the item to load.\n\nThe custom identifier of an item can be used here if the `use_custom_id` parameter is true.\n",
            "required": true
          },
          {
            "name": "max_rating",
            "in": "query",
            "type": "string",
            "description": "The maximum rating (inclusive) of items returned, e.g. 'auoflc-pg'."
          },
          {
            "name": "expand",
            "description": "If no value is specified no dependencies are expanded.\n\nIf 'children' is specified then the list of any direct children will be expanded. For example\nseasons of a show or episodes of a season.\n\nIf 'all' is specified then the parent chain will be expanded along with any child list at each level.\nFor example if an episode is specified then its season will be expanded and that season's episode list.\nThe season will have its show expanded and the show will have its season list expanded.\n\nThe 'all' options is useful when you deep link into a show/season/episode for the first time as\nit provides full context for navigating around the show page. Subsequent navigation around\nchildren of the show should only need to request expand of children.\n\nIf 'ancestors' is specified then only the parent chain is included.\n\nIf 'parent' is specified then only the direct parent is included.\n\nIf an expand is specified which is not relevant to the item type, it will be ignored.\n",
            "in": "query",
            "type": "string",
            "enum": [
              "all",
              "children",
              "ancestors",
              "parent"
            ]
          },
          {
            "name": "select_season",
            "in": "query",
            "type": "string",
            "enum": [
              "first",
              "latest"
            ],
            "description": "Given a provided show id, it can be useful to get the details of a child season. This option\nprovides a means to return the `first` or `latest` season of a show given the show id.\n\nThe `expand` parameter also works here so for example you could land on a show page and request the\nlatest season along with `expand=all`. This would then return the detail of the latest season with\nits list of child episode summaries, and also expand the detail of the show with its list of seasons summaries.\n\nNote the `id` parameter must be a show id for this parameter to work correctly.\n"
          },
          {
            "name": "use_custom_id",
            "description": "Set to true when passing a custom Id as the `id` path parameter.",
            "in": "query",
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/Device"
          },
          {
            "$ref": "#/parameters/Subscription"
          },
          {
            "$ref": "#/parameters/Segments"
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "The item requested",
            "schema": {
              "$ref": "#/definitions/ItemDetail"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/items/{id}/children": {
      "x-serviceId": "itemChildList",
      "get": {
        "description": "Returns the List of child summary items under an item.\n\nIf the item is a Season then the children will be episodes and ordered by episode number.\n\nIf the item is a Show then the children will be Seasons and ordered by season number.\n\nReturns 404 if no children found.\n",
        "operationId": "getItemChildrenList",
        "tags": [
          "content"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The identifier of the item whose children to load.",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "page",
            "description": "The page of items to load. Starts from page 1.",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1
          },
          {
            "name": "page_size",
            "description": "The number of items to return in a page.",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "default": 12,
            "minimum": 1,
            "maximum": 100
          },
          {
            "name": "max_rating",
            "in": "query",
            "type": "string",
            "description": "The maximum rating (inclusive) of items returned, e.g. 'auoflc-pg'."
          },
          {
            "$ref": "#/parameters/ListOrder",
            "description": "The sort order of the returned list, either 'asc' or 'desc'.\nIf a list of Seasons the list is ordered by season number.\nIf a list of Episodes the list is ordered by episode number.\n",
            "default": "asc"
          },
          {
            "$ref": "#/parameters/Device"
          },
          {
            "$ref": "#/parameters/Subscription"
          },
          {
            "$ref": "#/parameters/Segments"
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of items requested.",
            "schema": {
              "$ref": "#/definitions/ItemList"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/items/{id}/related": {
      "x-serviceId": "itemRelatedList",
      "get": {
        "description": "Returns the list of items related to the parent item.\n\nNote for now, due to the size of the list being unknown, only a single page will be returned.\n",
        "operationId": "getItemRelatedList",
        "tags": [
          "content"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "The identifier of the item to based related items off."
          },
          {
            "name": "page",
            "description": "The page of items to load. Starts from page 1.",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1
          },
          {
            "name": "page_size",
            "description": "The number of items to return in a page.",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "default": 12,
            "minimum": 1,
            "maximum": 100
          },
          {
            "name": "max_rating",
            "in": "query",
            "type": "string",
            "description": "The maximum rating (inclusive) of items returned, e.g. 'auoflc-pg'."
          },
          {
            "$ref": "#/parameters/Device"
          },
          {
            "$ref": "#/parameters/Subscription"
          },
          {
            "$ref": "#/parameters/Segments"
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of items requested.",
            "schema": {
              "$ref": "#/definitions/ItemList"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/items/{id}/videos": {
      "x-serviceId": "media",
      "get": {
        "description": "Get the free / public video files associated with an item given maximum resolution,\ndevice type and one or more delivery types.\n\nReturns an array of video file objects which each include a url to a video.\n\nThe first entry in the array contains what is predicted to be the best match.\nThe remainder of the entries, if any, may contain resolutions below what was\nrequests. For example if you request HD-720 the response may also contain\nSD entries.\n\nIf you specify multiple delivery types, then the response array will insert\ntypes in the order you specify them in the query. For example `stream,progressive`\nwould return an array with 0 or more stream files followed by 0 or more progressive files.\n\nIf no files are found a 404 is returned.\n",
        "operationId": "getPublicItemMediaFiles",
        "tags": [
          "content"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The identifier of the item whose video files to load.",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "$ref": "#/parameters/MediaFileDelivery"
          },
          {
            "$ref": "#/parameters/MediaFileResolution"
          },
          {
            "$ref": "#/parameters/MediaFileFormats"
          },
          {
            "$ref": "#/parameters/Device",
            "required": true
          },
          {
            "$ref": "#/parameters/Subscription"
          },
          {
            "$ref": "#/parameters/Segments"
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of video files available.\nThe first entry containing what is predicted to be the best match.\n",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MediaFile"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/items/{itemId}/next": {
      "x-serviceId": "itvNightwatch",
      "get": {
        "description": "Identical to GET /account/profile/items/{itemId}/next route but for users\nthat are not logged in i.e. this endpoint does not require authorisation\n",
        "operationId": "getAnonNextPlaybackItem",
        "tags": [
          "content"
        ],
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "type": "string",
            "description": "The identifier of the source item to base the next to watch item off.\n",
            "required": true
          },
          {
            "name": "max_rating",
            "in": "query",
            "type": "string",
            "description": "The maximum rating (inclusive) of an item returned, e.g. 'auoflc-pg'."
          },
          {
            "name": "expand",
            "description": "If no value is specified no dependencies are expanded.\n\nIf 'parent' is specified then only the direct parent will be expanded.\nFor example if an `Episode` then the `Season` would be included.\n\nIf 'ancestors' is specified then the full parent chain is expanded.\nFor example if an `Episode` then both the `Season` and `Show` would be included.\n",
            "in": "query",
            "type": "string",
            "enum": [
              "parent",
              "ancestors"
            ]
          },
          {
            "$ref": "#/parameters/Device"
          },
          {
            "$ref": "#/parameters/Segments"
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "The detail of the next item to play.",
            "schema": {
              "$ref": "#/definitions/NextPlaybackItem"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/itv/billinghistory/{platform}": {
      "x-serviceId": "itvSubscription",
      "post": {
        "description": "Returns the list of billing records for specified payment platform.",
        "operationId": "getBillingHistory",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "name": "platform",
            "in": "path",
            "type": "string",
            "description": "The identifier of the payment platform (stripe/itunes).",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "description": "Details of a billing history request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItvBillingHistoryRequest"
            }
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "List of billing records.",
            "schema": {
              "$ref": "#/definitions/ItvBillingHistory"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/itv/cards/{platform}": {
      "x-serviceId": "itvSubscription",
      "put": {
        "description": "Change payment card details.",
        "operationId": "changeCardDetails",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "name": "platform",
            "in": "path",
            "type": "string",
            "description": "The identifier of the payment platform (stripe/itunes).",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "description": "Details of change card details request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItvChangeCardDetailsRequest"
            }
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      },
      "post": {
        "description": "Get payment card details.",
        "operationId": "getCardDetails",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "name": "platform",
            "in": "path",
            "type": "string",
            "description": "The identifier of the payment platform (stripe/itunes).",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "description": "ITV profile token in body.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItvGetCardDetailsRequest"
            }
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ItvCardDetails"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/itv/changeemail": {
      "x-serviceId": "itvProfile",
      "post": {
        "description": "Change email address related to account/profile.\n\nThe expected token scope is Settings.\n",
        "operationId": "changeEmail",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "type": "string",
            "description": "New email address & ITV profile token.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItvChangeEmailRequest"
            }
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Settings"
            ]
          }
        ]
      }
    },
    "/itv/changemarketing": {
      "x-serviceId": "itvProfile",
      "post": {
        "description": "Change marketing preferences related to account/profile.\n\nThe expected token scope is Settings.\n",
        "operationId": "changeMarketing",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "type": "string",
            "description": "Updated marketing preferences & ITV profile token.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItvChangeMarketingRequest"
            }
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Settings"
            ]
          }
        ]
      }
    },
    "/itv/deleteaccount": {
      "x-serviceId": "itvGdpr",
      "post": {
        "description": "Delete account in compliance with GDPR.\n\nThe expected token scope is Settings.\n",
        "operationId": "deleteAccount",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "type": "string",
            "description": "New email address & ITV profile token.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItvDeleteAccountRequest"
            }
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Settings"
            ]
          }
        ]
      }
    },
    "/itv/entitlements/current": {
      "x-serviceId": "itvSubscription",
      "get": {
        "description": "Returns current entitlement.",
        "operationId": "getCurrentEntitlement",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "Current entitlement.",
            "schema": {
              "$ref": "#/definitions/ItvEntitlementCurrent"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/itv/entitlements/history": {
      "x-serviceId": "itvSubscription",
      "get": {
        "description": "Returns the state of subscription for any payment platform.",
        "operationId": "getEntitlementsHistory",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "Details of current subscription.",
            "schema": {
              "$ref": "#/definitions/ItvEntitlementsHistory"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/itv/featureFlag/{feature}": {
      "x-serviceId": "itvConfig",
      "get": {
        "description": "Gets info whether or not a feature is enabled or disabled using a feature flag. Feature flags are set as a custom field within PM. It also supports custom feature flag data if needed. Such data can be return as well.",
        "operationId": "getFeatureFlag",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "name": "feature",
            "in": "path",
            "type": "string",
            "description": "The identifier of the feature to check for feature flag.",
            "required": true
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "$ref": "#/definitions/ItvFeatureFlag"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/itv/googlepay/subscription": {
      "x-serviceId": "itvSubscription",
      "post": {
        "description": "Get the list of recommended items under the active profile.",
        "operationId": "googlePaySubscription",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of googlePay subscription request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItvGooglePaySubscriptionRequest"
            }
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "missing purchase token/subscription item in body, or subscription item undefined"
          },
          "401": {
            "description": "Invalid or missing grant"
          },
          "409": {
            "description": "Purchase token is already attached to a different user"
          },
          "415": {
            "description": "wrong content-type"
          },
          "500": {
            "description": "something bad has happened"
          }
        },
        "security": [
          {
            "profileAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/itv/had/entitlements": {
      "x-serviceId": "itvSubscription",
      "get": {
        "description": "Check whether the user has been previously entitled.",
        "operationId": "checkPreviousEntitlements",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ItvHadEntitlement"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/itv/items/clips": {
      "x-serviceId": "itvItem",
      "post": {
        "description": "Get the media clip files associated with items.\n",
        "operationId": "getItemsMediaClipFiles",
        "tags": [
          "content"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "The item Axis ids joined string with comma.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItemDownloadableRequest"
            }
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "The item id with clip files",
            "schema": {
              "$ref": "#/definitions/ItemClipFilesList"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/itv/items/downloadable": {
      "x-serviceId": "itvItem",
      "post": {
        "description": "Returns the details of an item with the specified id.",
        "operationId": "getItemDownloadables",
        "tags": [
          "content"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "The item Axis ids joined string with comma.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItemDownloadableRequest"
            }
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "The item requested",
            "schema": {
              "$ref": "#/definitions/ItemDownloadableList"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/itv/itemsummary/{externalId}": {
      "x-serviceId": "itvInfo",
      "get": {
        "description": "Redirects to corresponding Axis Item details page.",
        "operationId": "getItem",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "name": "externalId",
            "in": "path",
            "type": "string",
            "description": "The external identifier of the item.",
            "required": true
          }
        ],
        "responses": {
          "302": {
            "description": "Item found.",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/itv/page": {
      "x-serviceId": "itvPage",
      "get": {
        "description": "Returns a page with the specified id.\n\nThis is a cut down version for low memory devices.123\n\nIf targeting the search page you must url encode the search term as a parameter\nusing the `q` key. For example if your browser path looks like `/search?q=the`\nthen what you pass to this endpoint would look like `/itv/page?path=/search%3Fq%3Dthe`.\n",
        "operationId": "getItvPage",
        "tags": [
          "app"
        ],
        "parameters": [
          {
            "name": "path",
            "description": "The path of the page to load, e.g. '/movies'.",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "list_page_size",
            "description": "The number of items to load when prefetching and paging each list in the page row.",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "default": 12,
            "minimum": 1,
            "maximum": 100
          },
          {
            "name": "list_page_size_large",
            "description": "The number of items to load when prefetching a continuous scroll list entry in a page.\n\nBy default any list page entry with template pattern `/^CS\\d+$/` will\nbe considered a continuous scroll list.\n",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "minimum": 1,
            "maximum": 100
          },
          {
            "name": "max_list_prefetch",
            "description": "The maximum number of lists to prefetch in the page.",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 15,
            "default": 2
          },
          {
            "name": "item_detail_expand",
            "description": "Only relevant when loading item detail pages as these embed a detailed item in the main page entry.\n\nIf no value is specified no item dependencies are expanded.\n\nIf 'children' is specified then the list of any direct children will be expanded. For example\nseasons of a show or episodes of a season.\n\nIf 'all' is specified then the parent chain will be expanded along with any child list at each level.\nFor example if an episode is specified then its season will be expanded and that season's episode list.\nThe season will have its show expanded and the show will have its season list expanded.\n\nThe 'all' options is useful when you deep link into a show/season/episode for the first time as\nit provides full context for navigating around the show page. Subsequent navigation around\nchildren of the show should only need to request expand of children.\n\nIf 'ancestors' is specified then only the parent chain is included\n\nIf an expand is specified which is not relevant to the item type, it will be ignored.\n",
            "in": "query",
            "type": "string",
            "enum": [
              "all",
              "children",
              "ancestors"
            ]
          },
          {
            "name": "item_detail_select_season",
            "description": "Only relevant when loading show detail pages as these embed a detailed item in the main page entry.\n\nSince the introduction of the D1,2,3 templates this parameter is now somewhat redundant, or less\nlikely to have any effect. While it may still be useful in some cases, most of the time the season\nselection will be dictated by the configuration of the rows scheduled on the show detail page.\nThis parameter will only take effect if there are rows used to schedule episodes of a season, like\nD1,2,3, or if no rows have a value set for their `seasonOrder` custom field.\n\nGiven a targeted show page, it can be useful to get the details of a child season. This option\nprovides a means to return the `first` or `latest` season of a show embedded in the page.\n\nThe `expand` parameter also works here so for example you could land on a show page and request the\n`item_detail_select_season=latest` along with `item_detail_expand=all`. This would then return the\ndetail of the latest season with its list of child episode summaries, and also expand\nthe detail of the show with its list of seasons summaries.\n",
            "in": "query",
            "type": "string",
            "enum": [
              "first",
              "latest"
            ]
          },
          {
            "name": "text_entry_format",
            "description": "Only relevant to page entries of type `TextEntry`.\n\nConverts the value of a text page entry to the specified format.\n",
            "in": "query",
            "type": "string",
            "enum": [
              "markdown",
              "html"
            ],
            "default": "markdown"
          },
          {
            "name": "max_rating",
            "description": "The maximum rating (inclusive) of items returned, e.g. 'auoflc-pg'.",
            "in": "query",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Device"
          },
          {
            "$ref": "#/parameters/Subscription"
          },
          {
            "$ref": "#/parameters/Segments"
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "The page requested.",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "301": {
            "description": "Returned if feature flag `cd` is set and item detail is requested of an item that has\nCustom Destination set to an External URL. The `Location` response header contains the URL.\n"
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/itv/pinauthorization": {
      "x-serviceId": "itvAuth",
      "post": {
        "description": "Provides authorization with parental control pin.\n\nReturns an array containing account token with Playback scope.\n\nRequires access token with Catalog scope.\n\nPin must be a 4-digit string\n",
        "operationId": "getAccountTokenWithPin",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of token request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItvPinAuthRequest"
            }
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "additionalProperties": false,
              "items": {
                "$ref": "#/definitions/AccessToken"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/itv/plan/{platform}": {
      "x-serviceId": "itvSubscription",
      "post": {
        "description": "Upgrades the plan for the current user.",
        "operationId": "upgradePlan",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "name": "platform",
            "in": "path",
            "type": "string",
            "description": "The identifier of the payment platform (stripe/itunes). Only Stripe is supported",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "description": "Details of an upgrade request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItvUpgradePlanRequest"
            }
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "Upgrade succeeded."
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/itv/plans/{platform}": {
      "x-serviceId": "itvSubscription",
      "get": {
        "description": "Returns the plans available for specified payment platform.",
        "operationId": "getPlans",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "name": "platform",
            "in": "path",
            "type": "string",
            "description": "The identifier of the payment platform (stripe/itunes).",
            "required": true
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "List of available plans.",
            "schema": {
              "$ref": "#/definitions/ItvPlans"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/itv/profile": {
      "x-serviceId": "itvProfile",
      "get": {
        "description": "Returns the ITV profile object.",
        "operationId": "getProfile",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "The ITV profile object.",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      },
      "put": {
        "description": "Update ITV profile.\n\nThe expected token scope is Settings.\n",
        "operationId": "updateProfile",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "type": "string",
            "description": "ITV profile object with updated values & ITV profile token.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItvUpdateProfileRequest"
            }
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Settings"
            ]
          }
        ]
      }
    },
    "/itv/profile/recommendation/list": {
      "x-serviceId": "itvRecommendation",
      "get": {
        "description": "Get the list of recommended items under the active profile.",
        "operationId": "getRecommendedList",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "name": "item_types",
            "description": "List of item types to filter the recommendation list",
            "in": "query",
            "type": "array",
            "collectionFormat": "csv",
            "items": {
              "description": "item type name",
              "type": "string",
              "minLength": 1
            },
            "example": {
              "item_types": "show,movie"
            }
          },
          {
            "name": "page",
            "description": "The page of items to load. Starts from page 1.",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1
          },
          {
            "name": "page_size",
            "description": "The number of items to return in a page.",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "default": 12,
            "minimum": 1,
            "maximum": 50
          },
          {
            "name": "recId",
            "in": "query",
            "type": "string",
            "description": "Amplitude or other providers recommendation id if aplicable.",
            "required": false
          },
          {
            "$ref": "#/parameters/Device"
          },
          {
            "$ref": "#/parameters/Subscription"
          },
          {
            "$ref": "#/parameters/Segments"
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of items requested.",
            "schema": {
              "$ref": "#/definitions/ItemList"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "profileAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/itv/profiletoken": {
      "x-serviceId": "itvSubscription",
      "post": {
        "description": "Returns the ITV profile token.",
        "operationId": "getItvProfileToken",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of token request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItvProfileTokenRequest"
            }
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "The ITV profile token.",
            "schema": {
              "$ref": "#/definitions/ItvProfileToken"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/itv/purchase/{platform}": {
      "x-serviceId": "itvSubscription",
      "get": {
        "description": "Returns the details of current subscription for specified payment platform.",
        "operationId": "getCurrentSubscription",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "name": "platform",
            "in": "path",
            "type": "string",
            "description": "The identifier of the payment platform (stripe/itunes).",
            "required": true
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "Details of current subscription.",
            "schema": {
              "$ref": "#/definitions/ItvCurrentSubscription"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      },
      "post": {
        "description": "Confirms purchase and returns the details of purchased subscription for specified payment platform.",
        "operationId": "confirmPurchase",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "name": "platform",
            "in": "path",
            "type": "string",
            "description": "The identifier of the payment platform (stripe/itunes).",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "description": "Details of a purchase request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItvPurchaseRequest"
            }
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "Details of purchased subscription.",
            "schema": {
              "$ref": "#/definitions/ItvPurchase"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      },
      "delete": {
        "description": "Cancel a plan subscription.\n\nA cancelled subscription will continue to be valid until the subscription\nexpiry date or next renewal date.\n",
        "operationId": "cancelSubscription",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "name": "platform",
            "in": "path",
            "type": "string",
            "description": "The identifier of the payment platform (stripe/itunes).",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "description": "Details of a cancellation request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItvCancelSubscriptionRequest"
            }
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/itv/purchase/{platform}/strong": {
      "x-serviceId": "itvSubscription",
      "post": {
        "description": "Confirms purchase and returns the details of purchased subscription for specified payment platform.",
        "operationId": "confirmPurchaseStrong",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "name": "platform",
            "in": "path",
            "type": "string",
            "description": "The identifier of the payment platform (stripe/itunes).",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "description": "Details of a purchase request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItvPurchaseStrongRequest"
            }
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "Details of purchased subscription.",
            "schema": {
              "$ref": "#/definitions/ItvPurchaseStrongResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/itv/purchase/{platform}/withoffer": {
      "x-serviceId": "itvSubscription",
      "post": {
        "description": "Confirms purchase and returns the details of purchased subscription for specified payment platform.",
        "operationId": "confirmPurchaseWithOffer",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "name": "platform",
            "in": "path",
            "type": "string",
            "description": "The identifier of the payment platform (stripe/itunes).",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "description": "Details of a purchase request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItvPurchaseWithOfferRequest"
            }
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "Details of purchased subscription.",
            "schema": {
              "$ref": "#/definitions/ItvPurchaseWithOfferResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/itv/recommendations/config": {
      "x-serviceId": "itvRecommendation",
      "get": {
        "description": "Get the list of reccomendation configurations.",
        "operationId": "getRecommendationConfig",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of reccomendation configurations.",
            "schema": {
              "$ref": "#/definitions/ItvRecsConfigList"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/itv/resubscribe/{platform}": {
      "x-serviceId": "itvSubscription",
      "post": {
        "description": "Resubscription for a user.",
        "operationId": "resubscribe",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "name": "planId",
            "description": "The id of the plan to renew.",
            "in": "query",
            "type": "string",
            "required": true
          },
          {
            "name": "platform",
            "in": "path",
            "type": "string",
            "description": "The identifier of the payment platform (stripe/itunes). Only stripe is currently supported.",
            "required": true
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. The response body is the updated plan information.",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Invalid Rocket token."
          },
          "404": {
            "description": "Customer not found or no active subscription."
          },
          "406": {
            "description": "Invalid ITV token."
          },
          "409": {
            "description": "Customer not already set for cancellation."
          },
          "500": {
            "description": "Third party API internal server error."
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/itv/roku/plans": {
      "x-serviceId": "itvRoku",
      "get": {
        "description": "Gets available Roku plans.",
        "operationId": "getPlans",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "Details of available Roku plans.",
            "schema": {
              "$ref": "#/definitions/RokuPlans"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/itv/roku/transaction/{transactionid}": {
      "x-serviceId": "itvRoku",
      "post": {
        "description": "Sends request to execute specified transaction.",
        "operationId": "executeTransaction",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "name": "transactionid",
            "in": "path",
            "type": "string",
            "description": "The identifier of the Roku transaction (subscribe/upgrade/downgrade/cancellation).",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "description": "Details of a transaction request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItvRokuTransactionRequest"
            }
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "OK."
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/itv/save-offer": {
      "x-serviceId": "itvSubscription",
      "get": {
        "description": "Checks the provided coupon id for a user. Only Stripe platform is currently supported.",
        "operationId": "getSaveOffer",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "Avalable save offer plan, if any.",
            "schema": {
              "$ref": "#/definitions/ItvGetDiscountResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      },
      "post": {
        "description": "Activates the discount for a user. Only Stripe platform is currently supported.",
        "operationId": "activateSaveOffer",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "name": "couponId",
            "in": "body",
            "type": "string",
            "description": "The coupon id to be checked.",
            "required": true
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "204": {
            "description": "Authentication  passes, the user has an active subscription and the coupon id is valid. The response body is the updated subscription object."
          },
          "401": {
            "description": "Unauthorised. In the case of a token this can happen if the token is missing, invalid, or if the token bearer does not match the user in the path."
          },
          "404": {
            "description": "The customer could not be found.The customer does not have an active subscription. The coupon could not be found."
          },
          "406": {
            "description": "Invalid Token/Customer Not Eligible for Offer."
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/itv/subscription/fullpricerenewal": {
      "x-serviceId": "itvSubscription",
      "get": {
        "400": {
          "description": "Bad request.",
          "schema": {
            "$ref": "#/definitions/ServiceError"
          }
        },
        "404": {
          "description": "Not found.",
          "schema": {
            "$ref": "#/definitions/ServiceError"
          }
        },
        "415": {
          "description": "Unsupported Media Type",
          "schema": {
            "$ref": "#/definitions/ServiceError"
          }
        },
        "500": {
          "description": "Internal server error.",
          "schema": {
            "$ref": "#/definitions/ServiceError"
          }
        },
        "description": "Returns full price renewal state and reason for specific user.",
        "operationId": "getFullPriceRenewal",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "full price renewal state and reason for specific user.",
            "schema": {
              "$ref": "#/definitions/ItvSubscriptionFullPriceRenewal"
            }
          }
        },
        "default": {
          "description": "Service error.",
          "schema": {
            "$ref": "#/definitions/ServiceError"
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/itv/subscription/status/{platform}": {
      "x-serviceId": "itvSubscription",
      "get": {
        "400": {
          "description": "Bad request.",
          "schema": {
            "$ref": "#/definitions/ServiceError"
          }
        },
        "404": {
          "description": "Not found.",
          "schema": {
            "$ref": "#/definitions/ServiceError"
          }
        },
        "415": {
          "description": "Unsupported Media Type",
          "schema": {
            "$ref": "#/definitions/ServiceError"
          }
        },
        "500": {
          "description": "Internal server error.",
          "schema": {
            "$ref": "#/definitions/ServiceError"
          }
        },
        "description": "Returns status of latest payment intent.",
        "operationId": "getSubscriptionStatus",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "name": "platform",
            "in": "path",
            "type": "string",
            "description": "The identifier of the payment platform (stripe/itunes).",
            "required": true
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "Status of the latest payment intent",
            "schema": {
              "$ref": "#/definitions/ItvSubscriptionStatusResponse"
            }
          }
        },
        "default": {
          "description": "Service error.",
          "schema": {
            "$ref": "#/definitions/ServiceError"
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/itv/subscriptionstate": {
      "x-serviceId": "itvSubscription",
      "get": {
        "description": "Returns the state of subscription for any payment platform.",
        "operationId": "getSubscriptionState",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "Details of current subscription.",
            "schema": {
              "$ref": "#/definitions/ItvSubscriptionState"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/itv/upcominginvoice": {
      "x-serviceId": "itvSubscription",
      "get": {
        "description": "Returns an upcoming invoice",
        "operationId": "getUpcomingInvoice",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "Avalable save offer plan, if any.",
            "schema": {
              "$ref": "#/definitions/ItvGetDiscountResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/itv/updateIntent/strong/{platform}": {
      "x-serviceId": "itvSubscription",
      "put": {
        "description": "Change payment method details.",
        "operationId": "updatePaymentIntentStrong",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "name": "platform",
            "in": "path",
            "type": "string",
            "description": "The identifier of the payment platform (stripe only is currently supported).",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "description": "Details of change card details request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItvUpdateIntentStrongRequest"
            }
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ItvUpdateIntentStrongResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/itv/updatePayment/strong/{platform}": {
      "x-serviceId": "itvSubscription",
      "put": {
        "description": "Change payment method details.",
        "operationId": "updatePaymentMethodStrong",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "name": "platform",
            "in": "path",
            "type": "string",
            "description": "The identifier of the payment platform (stripe only is currently supported).",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "description": "Details of change card details request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItvUpdatePaymentStrongRequest"
            }
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/itv/voucher/{planId}/{voucherId}": {
      "x-serviceId": "itvSubscription",
      "get": {
        "description": "Checks the provided coupon id for a user. Only Stripe platform is currently supported.",
        "operationId": "getVoucherById",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "name": "voucherId",
            "in": "path",
            "type": "string",
            "description": "The identifier of the voucher.",
            "required": true
          },
          {
            "name": "planId",
            "in": "path",
            "type": "string",
            "description": "The identifier of the plan.",
            "required": true
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "Avalable voucher, if any.",
            "schema": {
              "$ref": "#/definitions/ItvVoucher"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/itv/voucher/{platform}": {
      "x-serviceId": "itvSubscription",
      "post": {
        "description": "Validates the coupon/voucher for specified payment platform.",
        "operationId": "checkVoucher",
        "tags": [
          "itv"
        ],
        "parameters": [
          {
            "name": "platform",
            "in": "path",
            "type": "string",
            "description": "The identifier of the payment platform (stripe/itunes).",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "description": "Coupon/voucher.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItvVoucherRequest"
            }
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "Details of requested coupon/voucher.",
            "schema": {
              "$ref": "#/definitions/ItvVoucher"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "accountAuth": [
              "Catalog"
            ]
          }
        ]
      }
    },
    "/lists": {
      "x-serviceId": "list",
      "get": {
        "description": "Returns an array of item lists with their first page of content resolved.",
        "operationId": "getLists",
        "tags": [
          "content"
        ],
        "parameters": [
          {
            "name": "ids",
            "description": "A comma delimited list of item list identifiers.\n\nThese can be list ids e.g. `14354,65473,3234`\n\nOr more complex sort/filter queries using pipes e.g.\n\n`14354|max_rating=AUOFLC-E|order=asc|order_by=year-added,65473|page_size=30,3234`\n\n_Note the id must always come first for each encoded list query_\n\nList parameters may be provide without the `param=` prefix e.g. `14354|genre:action`\n\nOnly the following options can be present.\n  - `order`\n  - `order_by`\n  - `max_rating`\n  - `page_size`\n  - `item_type`\n  - `param`\n",
            "in": "query",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": true
          },
          {
            "name": "page_size",
            "description": "The number of items to return in a page.",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "default": 12,
            "minimum": 1,
            "maximum": 100
          },
          {
            "name": "max_rating",
            "description": "The maximum rating (inclusive) of items returned, e.g. 'auoflc-pg'.",
            "in": "query",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ListOrder"
          },
          {
            "$ref": "#/parameters/ListOrderBy"
          },
          {
            "$ref": "#/parameters/ItemType"
          },
          {
            "$ref": "#/parameters/Device"
          },
          {
            "$ref": "#/parameters/Subscription"
          },
          {
            "$ref": "#/parameters/Segments"
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "The array of item lists requested.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ItemList"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/lists/{id}": {
      "x-serviceId": "list",
      "get": {
        "description": "Returns a list of items under the specified item list",
        "operationId": "getList",
        "tags": [
          "content"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The identifier of the list to load.",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "page",
            "description": "The page of items to load. Starts from page 1.",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1
          },
          {
            "name": "page_size",
            "description": "The number of items to return in a page.",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "default": 12,
            "minimum": 1,
            "maximum": 100
          },
          {
            "name": "max_rating",
            "description": "The maximum rating (inclusive) of items returned, e.g. 'auoflc-pg'.",
            "in": "query",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ListOrder"
          },
          {
            "$ref": "#/parameters/ListOrderBy"
          },
          {
            "name": "param",
            "description": "The list parameter in format 'key:value', e.g. 'genre:action'.",
            "in": "query",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ItemType"
          },
          {
            "$ref": "#/parameters/Device"
          },
          {
            "$ref": "#/parameters/Subscription"
          },
          {
            "$ref": "#/parameters/Segments"
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of items requested.",
            "schema": {
              "$ref": "#/definitions/ItemList"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/page": {
      "x-serviceId": "page",
      "get": {
        "description": "Returns a page with the specified id.\n\nIf targeting the search page you must url encode the search term as a parameter\nusing the `q` key. For example if your browser path looks like `/search?q=the`\nthen what you pass to this endpoint would look like `/page?path=/search%3Fq%3Dthe`.\n",
        "operationId": "getPage",
        "tags": [
          "app"
        ],
        "parameters": [
          {
            "name": "path",
            "description": "The path of the page to load, e.g. '/movies'.",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "list_page_size",
            "description": "The number of items to load when prefetching and paging each list in the page row.",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "default": 12,
            "minimum": 1,
            "maximum": 100
          },
          {
            "name": "list_page_size_large",
            "description": "The number of items to load when prefetching a continuous scroll list entry in a page.\n\nBy default any list page entry with template pattern `/^CS\\d+$/` will\nbe considered a continuous scroll list.\n",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "minimum": 1,
            "maximum": 100
          },
          {
            "name": "max_list_prefetch",
            "description": "The maximum number of lists to prefetch in the page.",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 15,
            "default": 2
          },
          {
            "name": "item_detail_expand",
            "description": "Only relevant when loading item detail pages as these embed a detailed item in the main page entry.\n\nIf no value is specified no item dependencies are expanded.\n\nIf 'children' is specified then the list of any direct children will be expanded. For example\nseasons of a show or episodes of a season.\n\nIf 'all' is specified then the parent chain will be expanded along with any child list at each level.\nFor example if an episode is specified then its season will be expanded and that season's episode list.\nThe season will have its show expanded and the show will have its season list expanded.\n\nThe 'all' options is useful when you deep link into a show/season/episode for the first time as\nit provides full context for navigating around the show page. Subsequent navigation around\nchildren of the show should only need to request expand of children.\n\nIf 'ancestors' is specified then only the parent chain is included\n\nIf an expand is specified which is not relevant to the item type, it will be ignored.\n",
            "in": "query",
            "type": "string",
            "enum": [
              "all",
              "children",
              "ancestors"
            ]
          },
          {
            "name": "item_detail_select_season",
            "description": "Only relevant when loading show detail pages as these embed a detailed item in the main page entry.\n\nSince the introduction of the D1,2,3 templates this parameter is now somewhat redundant, or less\nlikely to have any effect. While it may still be useful in some cases, most of the time the season\nselection will be dictated by the configuration of the rows scheduled on the show detail page.\nThis parameter will only take effect if there are rows used to schedule episodes of a season, like\nD1,2,3, or if no rows have a value set for their `seasonOrder` custom field.\n\nGiven a targeted show page, it can be useful to get the details of a child season. This option\nprovides a means to return the `first` or `latest` season of a show embedded in the page.\n\nThe `expand` parameter also works here so for example you could land on a show page and request the\n`item_detail_select_season=latest` along with `item_detail_expand=all`. This would then return the\ndetail of the latest season with its list of child episode summaries, and also expand\nthe detail of the show with its list of seasons summaries.\n",
            "in": "query",
            "type": "string",
            "enum": [
              "first",
              "latest"
            ]
          },
          {
            "name": "text_entry_format",
            "description": "Only relevant to page entries of type `TextEntry`.\n\nConverts the value of a text page entry to the specified format.\n",
            "in": "query",
            "type": "string",
            "enum": [
              "markdown",
              "html"
            ],
            "default": "markdown"
          },
          {
            "name": "max_rating",
            "description": "The maximum rating (inclusive) of items returned, e.g. 'auoflc-pg'.",
            "in": "query",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Device"
          },
          {
            "$ref": "#/parameters/Subscription"
          },
          {
            "$ref": "#/parameters/Segments"
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "The page requested.",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "301": {
            "description": "Returned if feature flag `cd` is set and item detail is requested of an item that has\nCustom Destination set to an External URL. The `Location` response header contains the URL.\n"
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/plans/{id}": {
      "x-serviceId": "subscription",
      "get": {
        "description": "Returns the details of a Plan with the specified id.",
        "operationId": "getPlan",
        "tags": [
          "content"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "description": "The identifier of the Plan to load.",
            "required": true
          },
          {
            "$ref": "#/parameters/Device"
          },
          {
            "$ref": "#/parameters/Subscription"
          },
          {
            "$ref": "#/parameters/Segments"
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "The Plan requested.",
            "schema": {
              "$ref": "#/definitions/Plan"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/register": {
      "x-serviceId": "itvRegistration",
      "post": {
        "description": "Register a new user, creating them an account.\n\nRegistration, when successful, will return an array of access tokens so the user is\nimmediately signed in.\n\nIt returns Catalog and Commerce scoped tokens for both Account and Profile.\nThe Commerce ones are intended to allow the purchase of a subscription plan\nin the step after registration, without the user being prompted to enter\ntheir username and password again.\n\nAn email will also be sent with a link they need to click to confirm their\nemail address. This confirmation is done via the /verify-email endpoint.\n",
        "operationId": "register",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "registration"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "Registration details.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegistrationRequest"
            }
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "additionalProperties": false,
              "items": {
                "$ref": "#/definitions/AccessToken"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/request-password-reset": {
      "x-serviceId": "itvPassword",
      "post": {
        "description": "Request the password of an account's primary profile be reset.\n\nShould be called when a user has forgotten their password.\n\nThis will send an email with a password reset link to the email address of the\nprimary profile of an account.\n\nThe link, once clicked, should take the user to the \"reset-password\" page of the\nwebsite. Here they will enter their new password and submit to the /reset-password\nendpoint here, along with the password reset token provided in the original link.\n",
        "operationId": "forgotPassword",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "support"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "Email address of account to request a password reset on.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PasswordResetEmailRequest"
            }
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/reset-password": {
      "x-serviceId": "itvPassword",
      "post": {
        "description": "When a user requests to reset their password via the /request-password-reset endpoint, an\nemail is sent to the email address of the primary profile of the account. This email contains a link\nwith a reset token as query parameter. The link should take the user to the \"reset-password\"\npage of the website.\n\nFrom the reset-password page a user should enter the new password they wish to use. \nIt should then be submitted to this endpoint,\nalong with the reset token from the email link. \nThe token should be provided in the body as resetToken property.\n",
        "operationId": "resetPassword",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "support"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "ITV reset token from email link and a new password.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PasswordResetRequest"
            }
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/samsung-preview": {
      "x-serviceId": "itvSamsung",
      "get": {
        "description": "Returns public preview for Samsung based on the page '/samsung-preview' configured in PresentationManager.\nThere is a hard limit of max 40 items to be returned. It splits evenly items count into the page rows, remaining items are added into the first row.\n",
        "operationId": "getPublicPreview",
        "tags": [
          "itv"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The samsung public preview requested.",
            "schema": {
              "$ref": "#/definitions/SamsungPreview"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/schedules": {
      "x-serviceId": "schedule",
      "get": {
        "description": "Returns schedules for a defined set of channels over a requested period.\n\nSchedules are requested in hour blocks and returned grouped by the channel\nthey belong to.\n\nFor example, to load 12 hours of schedules for channels `4343` and `5234`,\non 21/2/2017 starting from 08:00.\n\n```\nchannels=4343,5234\ndate=2017-02-21\nhour=8\nduration=12\n```\n\nPlease remember that `date` and `hour` combined represent a normal datetime, \nso they should be converted to UTC on the client - this will help to avoid \nissues with EPG schedules near midnight.\n\nIf a channel id is passed which doesn't exist then this endpoint will\nreturn an empty schedule list for it. If instead we returned 404,\nthis would invalidate all other channel schedules in the same request\nwhich would be unfriendly for clients presenting these channel schedules.\n",
        "operationId": "getSchedules",
        "tags": [
          "content"
        ],
        "parameters": [
          {
            "name": "channels",
            "description": "The list of channel ids to get schedules for.",
            "in": "query",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": true
          },
          {
            "name": "date",
            "description": "The date to target in ISO format, e.g. `2017-05-23` (converted to UTC - see main description).\n\nThe base hour requested will belong to this date.\n",
            "in": "query",
            "type": "string",
            "format": "date",
            "required": true
          },
          {
            "name": "hour",
            "description": "The base hour in the day, defined by the `date` parameter, you wish to load schedules for \n(converted to UTC - see main description).\n\nFrom 0 to 23, where 0 is midnight.\n",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 23,
            "required": true
          },
          {
            "name": "duration",
            "description": "The number of hours of schedules to load from the base `hour` parameter.\n\nThis may be negative or positive depending on whether you want to load past or future schedules.\n\nMinimum value is -24, maximum is 24. A value of zero is invalid.\n",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "minimum": -24,
            "maximum": 24,
            "required": true
          },
          {
            "name": "intersect",
            "description": "Flag indicating whether schedules should intersect or be contained in the\nprovided interval.\n\nIf set to `true`, the result will contain all schedules where either\nschedule start time or end time touches the provided interval.\n\nIf set to `false`, only schedules fully contained in the given period\nwill be returned.\n",
            "in": "query",
            "type": "boolean",
            "default": false
          },
          {
            "$ref": "#/parameters/Device"
          },
          {
            "$ref": "#/parameters/Subscription"
          },
          {
            "$ref": "#/parameters/Segments"
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of schedule lists for each channel requested.\n\nThe order of the channels will match the order of channel ids passed during the request.\n",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ItemScheduleList"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/search": {
      "x-serviceId": "search",
      "get": {
        "description": "Search the catalog of items and people.",
        "operationId": "search",
        "produces": [
          "application/json"
        ],
        "tags": [
          "content"
        ],
        "parameters": [
          {
            "name": "term",
            "description": "The search term to query.",
            "in": "query",
            "type": "string",
            "required": true
          },
          {
            "name": "include",
            "description": "By default people, movies and tv (shows + programs) will be included\nin the search results.\n\nIf the `cas` feature flag is set, \"other\" items (`customAsset`s) will\nalso be included by default\n\nIf you don't want all of these types you can specifiy the specific\nincludes you care about.\n",
            "in": "query",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "tv",
                "movies",
                "people",
                "other"
              ]
            },
            "collectionFormat": "csv"
          },
          {
            "name": "group",
            "description": "When this option is set, instead of all search result items being returned\nin a single list, they will instead be returned under two lists. One for\nmovies and another for tv (shows + programs).\n\nif the `cas` feature flag is set, a third `other` list will be\nincluded containing `customAsset` results\n\nDefault is undefined meaning items will be returned in a single list.\n\nThe array of `people` results will always be separate from items.\n",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "max_results",
            "description": "The maximum number of results to return.",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "default": 20,
            "minimum": 1,
            "maximum": 50
          },
          {
            "name": "max_rating",
            "description": "The maximum rating (inclusive) of items returned, e.g. 'auoflc-pg'.",
            "in": "query",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Device"
          },
          {
            "$ref": "#/parameters/Subscription"
          },
          {
            "$ref": "#/parameters/Segments"
          },
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "$ref": "#/definitions/SearchResults"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/verify-email": {
      "x-serviceId": "support",
      "post": {
        "description": "When an account is created an email is sent to the email address of the new account.\nThis contains a link, which once clicked, verifies the email address of the account is correct.\n\nThe link contains a token as a query parameter which should be passed as the authorization\nbearer token to this endpoint to complete email verification.\n\nThe token has en expiry, so if the link is not clicked before it expires, the account holder\nmay need to request a new verification email be sent. This can be done via the endpoint\n/account/request-email-verification.\n",
        "operationId": "verifyEmail",
        "tags": [
          "support"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/FeatureFlags"
          },
          {
            "$ref": "#/parameters/Language"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Invalid access token.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "default": {
            "description": "Service error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "security": [
          {
            "verifyEmailAuth": []
          }
        ]
      }
    }
  },
  "definitions": {
    "AccessToken": {
      "x-emoji": "🔑",
      "type": "object",
      "required": [
        "value",
        "refreshable",
        "expirationDate",
        "type"
      ],
      "additionalProperties": false,
      "properties": {
        "value": {
          "description": "The token value used for authenticated requests.",
          "type": "string"
        },
        "refreshable": {
          "description": "True if this token can be refreshed, false if not.",
          "type": "boolean"
        },
        "expirationDate": {
          "description": "The timestamp this token expires.",
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "description": "The type of the token.",
          "type": "string",
          "enum": [
            "UserAccount",
            "UserProfile"
          ]
        },
        "accountCreated": {
          "description": "When a `UserAccount` token is issued during a single-sign-on flow\na user may have been automatically registered if they didn't\nhave an account already. If this occurs then `accountCreated`\nwill be `true`.\n",
          "type": "boolean"
        }
      }
    },
    "Account": {
      "x-emoji": "👤",
      "type": "object",
      "required": [
        "id",
        "email",
        "trackingEnabled",
        "pinEnabled",
        "marketingEnabled",
        "primaryProfileId",
        "subscriptionCode",
        "profiles"
      ],
      "additionalProperties": true,
      "properties": {
        "id": {
          "description": "The id of the account.",
          "type": "string"
        },
        "address": {
          "description": "The address details of the account holder.",
          "$ref": "#/definitions/Address"
        },
        "emailVerified": {
          "description": "Whether the email address has been verified.\n\nUsers who receive an emailed verification url click the link to verify their email address.\n",
          "type": "boolean"
        },
        "firstName": {
          "description": "The first name of the account holder.",
          "type": "string"
        },
        "lastName": {
          "description": "The last name of the account holder.",
          "type": "string"
        },
        "trackingEnabled": {
          "description": "Whether usage tracking is associated with the account or anonymous.",
          "type": "boolean"
        },
        "pinEnabled": {
          "description": "When an account level pin is defined this will be true.",
          "type": "boolean"
        },
        "marketingEnabled": {
          "type": "boolean",
          "description": "Whether the account has opted in or out of marketing material."
        },
        "primaryProfileId": {
          "description": "The id of the primary profile.",
          "type": "string"
        },
        "usedFreeTrial": {
          "description": "Whether the account has used up their free trial period of a plan.",
          "type": "boolean"
        },
        "minRatingPlaybackGuard": {
          "description": "The classification rating defining the minimum rating level a user should be\nforced to enter the account pin code for playback. Anything at this rating\nlevel or above will require the pin for playback.\n\ne.g. AUOFLC-MA15+\n\nIf you want to disable this guard pass an empty string or `null`.\n",
          "type": "string"
        },
        "defaultPaymentMethodId": {
          "description": "The id of the payment method to use by default for account transactions.",
          "type": "string"
        },
        "defaultPaymentInstrumentId": {
          "x-deprecated": "Replaced with defaultPaymentMethodId",
          "description": "The id of the payment instrument to use by default for account transactions.\n\n **DEPRECATED** The property `defaultPaymentMethodId` is now preferred.\n",
          "type": "string"
        },
        "subscriptions": {
          "description": "The list of subscriptions, if any, the account has signed up to.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Subscription"
          }
        },
        "subscriptionCode": {
          "description": "The active subscription code for an account.\n\nThe value of this should be passed to any endpoints accepting a `sub` query parameter.\n",
          "type": "string"
        },
        "profiles": {
          "description": "The list of profiles under this account.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProfileSummary"
          }
        },
        "entitlements": {
          "description": "The list of entitlements to playback specific items.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Entitlement"
          }
        },
        "segments": {
          "description": "The segments an account has been placed under",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isFirstTimeSubscriber": {
          "description": "Whether the account has the very first subscription.",
          "type": "boolean"
        }
      }
    },
    "AccountDevices": {
      "type": "object",
      "required": [
        "devices",
        "maxRegistered"
      ],
      "additionalProperties": false,
      "properties": {
        "devices": {
          "description": "The array of registered playack devices.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Device"
          }
        },
        "maxRegistered": {
          "description": "The maximum number of playback devices that can be registered\nunder an account at a single time.\n\nIf there is no maximum defined this value will be `-1`.\n",
          "type": "integer",
          "format": "int32"
        },
        "registrationWindow": {
          "description": "Defines the start and end date of the current registration window along with calculated limits.\n\nIf undefined then there are no registration limits for a period.\n\nFor example given a registration period of 30 days, this sliding window will start on the\noldest registration of the last 30 days, and end 30 days from that registration date.\n\nIn this window there is a limit on how many devices can be registered in 30 days.\nIf exceeded then no more devices can be registered unless one is deregistered or the\noldest registration drops off the 30 day window.\n\nDeregistration also has potential limits which may prevent a device being deregistered.\nIn this case the user must wait until the oldest deregistered device is more than 30\ndays old.\n",
          "$ref": "#/definitions/DeviceRegistrationWindow"
        },
        "deregistrationWindow": {
          "description": "Defines the start and end date of the current deregistration window along with calculated limits.\n\nIf undefined then there are no deregistration limits for a period.\n\nFor example given a deregistration period of 30 days, this sliding window will start on the\noldest deregistration of the last 30 days, and end 30 days from that deregistration date.\n\nIn this window there is a limit on how many devices can be deregistered in 30 days.\nIf exceeded then no more devices can be deregistered unless the oldest deregistration drops\noff the 30 day window.\n",
          "$ref": "#/definitions/DeviceRegistrationWindow"
        }
      }
    },
    "AccountNonce": {
      "type": "object",
      "required": [
        "value"
      ],
      "additionalProperties": false,
      "properties": {
        "value": {
          "description": "The nonce value.",
          "type": "string"
        }
      }
    },
    "AccountTokenByCodeRequest": {
      "type": "object",
      "required": [
        "id",
        "code",
        "scopes"
      ],
      "additionalProperties": false,
      "properties": {
        "id": {
          "description": "The unique identifier for the device e.g. serial number.",
          "type": "string"
        },
        "code": {
          "description": "The generated device authorization code.",
          "type": "string"
        },
        "scopes": {
          "description": "The scope(s) of the token(s) required.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Catalog",
              "Commerce",
              "Settings",
              "Playback"
            ]
          }
        }
      }
    },
    "AccountTokenRequest": {
      "type": "object",
      "required": [
        "email",
        "password",
        "scopes"
      ],
      "additionalProperties": false,
      "properties": {
        "email": {
          "description": "The email associated with the account.",
          "type": "string"
        },
        "password": {
          "description": "The password associated with the account.",
          "type": "string"
        },
        "scopes": {
          "description": "The scope(s) of the tokens required.\nFor each scope listed an Account and Profile token of that scope will be returned\n",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Catalog",
              "Commerce",
              "Settings",
              "Playback"
            ]
          }
        },
        "cookieType": {
          "description": "If you specify a cookie type then a content filter cookie will be returned\nalong with the token(s). This is only intended for web based clients which\nneed to pass the cookies to a server to render a page based on the user's\ncontent filters e.g subscription code.\n\nIf type `Session` the cookie will be session based.\nIf type `Persistent` the cookie will have a medium term lifespan.\nIf undefined no cookies will be set.\n",
          "type": "string",
          "enum": [
            "Session",
            "Persistent"
          ]
        }
      },
      "example": {
        "email": "",
        "password": "",
        "scopes": [
          "Catalog"
        ]
      }
    },
    "AccountUpdateRequest": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "address": {
          "description": "The address of the account holder.\n\nIf the address is provided any properties which are omitted from the address will be cleared.\n",
          "$ref": "#/definitions/Address"
        },
        "firstName": {
          "description": "The first name of the account holder.",
          "type": "string"
        },
        "lastName": {
          "description": "The last name of the account holder.",
          "type": "string"
        },
        "trackingEnabled": {
          "description": "Whether usage tracking is associated with an account or anonymous.",
          "type": "boolean"
        },
        "defaultPaymentMethodId": {
          "description": "The id of the payment method to use by default for account transactions.",
          "type": "string"
        },
        "defaultPaymentInstrumentId": {
          "x-deprecated": "Replaced with defaultPaymentMethodId",
          "description": "The id of the payment instrument to use by default for account transactions.\n\n**DEPRECATED** The property `defaultPaymentMethodId` is now preferred.\n",
          "type": "string"
        },
        "minRatingPlaybackGuard": {
          "description": "The classification rating defining the minimum rating level a user should be\nforced to enter the account pin code for playback. Anything at this rating\nlevel or above will require the pin for playback.\n\ne.g. AUOFLC-MA15+\n\nIf you want to disable this guard pass an empty string or `null`.\n",
          "type": "string"
        },
        "segments": {
          "description": "The segments an account should be placed under",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AddPaymentMethodRequest": {
      "type": "object",
      "required": [
        "token",
        "type"
      ],
      "additionalProperties": false,
      "properties": {
        "token": {
          "description": "The payment provider token representing a payment method, obtained by\nsubmitting payment method details to your third party provider.\n",
          "type": "string"
        },
        "type": {
          "description": "The type of payment method.",
          "type": "string",
          "enum": [
            "Card"
          ]
        },
        "makeDefault": {
          "description": "Whether this payment method should become the account default when \nmaking purchases.\n\nNote that if this is the first payment method of type Card being added to an\naccount then it will become the default whether this property is true or false.\n",
          "type": "boolean"
        }
      }
    },
    "Address": {
      "x-emoji": "🏠",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "addressLine1": {
          "description": "The first line of the street address.",
          "type": "string"
        },
        "addressLine2": {
          "description": "The second line of the street address.",
          "type": "string"
        },
        "city": {
          "description": "The city name.",
          "type": "string"
        },
        "country": {
          "description": "The country name or code.",
          "type": "string"
        },
        "postcode": {
          "description": "The postal or zip code.",
          "type": "string"
        },
        "state": {
          "description": "The state name or abbreviation.",
          "type": "string"
        }
      }
    },
    "AppConfig": {
      "x-emoji": "⚙️",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "classification": {
          "description": "The map of classification ratings.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Classification"
          }
        },
        "subscription": {
          "$ref": "#/definitions/AppConfigSubscription"
        },
        "playback": {
          "$ref": "#/definitions/AppConfigPlayback"
        },
        "general": {
          "$ref": "#/definitions/AppConfigGeneral"
        },
        "navigation": {
          "$ref": "#/definitions/Navigation"
        },
        "sitemap": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PageSummary"
          }
        },
        "display": {
          "$ref": "#/definitions/AppConfigDisplay"
        },
        "i18n": {
          "$ref": "#/definitions/AppConfigI18n"
        },
        "linear": {
          "$ref": "#/definitions/AppConfigLinear"
        }
      }
    },
    "AppConfigDisplay": {
      "type": "object",
      "required": [
        "themes"
      ],
      "additionalProperties": false,
      "properties": {
        "themes": {
          "description": "An array of globally configured themes.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Theme"
          }
        }
      }
    },
    "AppConfigGeneral": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "websiteUrl": {
          "description": "The url of the primary website.",
          "type": "string",
          "format": "uri"
        },
        "gaToken": {
          "description": "A Google Analytics token to track applicaton user events.",
          "type": "string"
        },
        "stripeKey": {
          "description": "The public Stripe key to use for payment transactions.",
          "type": "string"
        },
        "facebookAppId": {
          "description": "The Facebook application id associated with an environment.",
          "type": "string"
        },
        "itemImageTypes": {
          "description": "A map of default item image types where the key is the item types.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "currencyCode": {
          "description": "The currency code to target.",
          "type": "string"
        },
        "customFields": {
          "description": "A map of custom configuration fields.",
          "type": "object",
          "additionalProperties": true
        },
        "maxUserRating": {
          "description": "The maximum value allowed for user ratings.",
          "type": "integer",
          "format": "int32"
        },
        "mandatorySignIn": {
          "description": "Whether to require sign in for customers to access content.",
          "type": "boolean"
        },
        "defaultTimeZone": {
          "description": "The default time zone of the site. e.g. \"Etc/GMT\"",
          "type": "string"
        }
      }
    },
    "AppConfigI18n": {
      "type": "object",
      "required": [
        "languages"
      ],
      "additionalProperties": false,
      "properties": {
        "languages": {
          "description": "An array of available languages.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Language"
          }
        }
      }
    },
    "AppConfigLinear": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "viewingWindowDaysAfter": {
          "description": "Number of available upcoming day schedules.",
          "type": "integer",
          "format": "int32"
        },
        "viewingWindowDaysBefore": {
          "description": "Number of available day schedules in the past.",
          "type": "integer",
          "format": "int32"
        },
        "scheduleCacheMaxAgeMinutes": {
          "description": "The maximum minutes of schedule cache time.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "AppConfigPlayback": {
      "type": "object",
      "required": [
        "heartbeatFrequency",
        "viewEventPoints",
        "chainPlaySqueezeback",
        "chainPlayTimeout",
        "chainPlayCountdown"
      ],
      "additionalProperties": false,
      "properties": {
        "heartbeatFrequency": {
          "description": "How often a heartbeat should be renewed during playback.",
          "type": "integer",
          "format": "int32"
        },
        "viewEventPoints": {
          "description": "An array of percentage points in which to fire off plabyack view events.\nFor example a value of 0.5 would indicate that an event should be\nfired when the user is half way through the video.\nOften known as quartiles when four equaly spread event points.\n",
          "type": "array",
          "items": {
            "type": "number",
            "minimum": 0,
            "maximum": 1
          }
        },
        "chainPlaySqueezeback": {
          "description": "The number of seconds before the end of playback when the current video\nshould be minimized and user options are presented within the video player.\n\nIf set to 0 there will be no squeezeback.\n",
          "type": "integer",
          "format": "int32"
        },
        "chainPlayTimeout": {
          "description": "The number of minutes of user inactivity before autoplay is paused.\n\nIf set to 0 there will be no autoplay timeout.\n",
          "type": "integer",
          "format": "int32"
        },
        "chainPlayCountdown": {
          "description": "The number of seconds before autoplay of next video.\n\nIf set to 0 there will be no autoplay.\n",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "AppConfigSubscription": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "plans": {
          "description": "The available public plans a user can subscribe to.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Plan"
          }
        }
      }
    },
    "Bookmark": {
      "x-emoji": "🔖",
      "type": "object",
      "required": [
        "itemId",
        "creationDate"
      ],
      "additionalProperties": false,
      "properties": {
        "itemId": {
          "description": "The id of the item bookmarked.",
          "type": "string"
        },
        "creationDate": {
          "description": "The date the bookmark was created.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "BtPlanListItem": {
      "x-emoji": "💳",
      "type": "object",
      "required": [
        "id",
        "nickname",
        "product",
        "currency",
        "trialPeriodDays",
        "description",
        "heroText",
        "ctaText",
        "headerText",
        "longText"
      ],
      "additionalProperties": false,
      "properties": {
        "id": {
          "description": "The identifier of a plan.",
          "type": "string"
        },
        "nickname": {
          "description": "The title of a plan.",
          "type": "string"
        },
        "product": {
          "description": "The product of a plan.",
          "type": "string"
        },
        "currency": {
          "description": "The currency a plan is offered in.",
          "type": "string"
        },
        "amount": {
          "description": "The price of a plan. If a free plan then undefined.",
          "type": "number",
          "format": "float"
        },
        "interval": {
          "description": "The type of billing period used.",
          "type": "string",
          "enum": [
            "day",
            "week",
            "month",
            "year",
            "none"
          ]
        },
        "intervalCount": {
          "description": "Given the `interval` this is how frequently it will run. e.g. every 2 weeks.",
          "type": "integer",
          "format": "int32"
        },
        "trialPeriodDays": {
          "description": "How many days a trial period runs for a plan. Only valid if `hasTrialPeriod` is true.",
          "type": "integer",
          "format": "int32"
        },
        "description": {
          "description": "The textual description.",
          "type": "string"
        },
        "heroText": {
          "description": "The textual description.",
          "type": "string"
        },
        "ctaText": {
          "description": "The textual description.",
          "type": "string"
        },
        "headerText": {
          "description": "The textual description.",
          "type": "string"
        },
        "longText": {
          "description": "The textual description.",
          "type": "string"
        },
        "termsAndConditionsStripe": {
          "type": "string"
        },
        "termsAndConditionsItunes": {
          "type": "string"
        },
        "ees07Title": {
          "type": "string"
        },
        "ees07PlanTitle": {
          "type": "string"
        },
        "ees07PlanDescription": {
          "type": "string"
        },
        "noThanksText": {
          "type": "string"
        },
        "switchingText": {
          "type": "string"
        }
      }
    },
    "BtPlans": {
      "type": "object",
      "required": [
        "plans"
      ],
      "additionalProperties": false,
      "properties": {
        "plans": {
          "description": "The list of available plans.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BtPlanListItem"
          }
        }
      }
    },
    "BtValidateTokenResponse": {
      "type": "object"
    },
    "ChangePasswordRequest": {
      "type": "object",
      "required": [
        "password",
        "profileToken"
      ],
      "additionalProperties": false,
      "properties": {
        "password": {
          "description": "The new password for the account.",
          "type": "string"
        },
        "profileToken": {
          "description": "The ITV profile token.",
          "type": "string"
        }
      }
    },
    "ChangePinRequest": {
      "type": "object",
      "required": [
        "pin"
      ],
      "additionalProperties": false,
      "properties": {
        "pin": {
          "description": "The new pin to set.",
          "type": "string"
        }
      }
    },
    "Classification": {
      "allOf": [
        {
          "$ref": "#/definitions/ClassificationSummary"
        },
        {
          "type": "object",
          "required": [
            "level",
            "system",
            "images"
          ],
          "properties": {
            "advisoryText": {
              "description": "Parental advisort text.",
              "type": "string"
            },
            "level": {
              "description": "The level of this classification when compared with its siblings.\nA higher level means a greater restriction.\nEach classification in a system should have a unique level.\n",
              "type": "integer",
              "format": "int32"
            },
            "system": {
              "description": "The parent system code of the classification.",
              "type": "string"
            },
            "images": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      ]
    },
    "ClassificationSummary": {
      "x-emoji": "🔞",
      "type": "object",
      "required": [
        "code",
        "name"
      ],
      "properties": {
        "code": {
          "description": "The unique code for a classification.",
          "type": "string"
        },
        "name": {
          "description": "The name of the classification for display.",
          "type": "string"
        }
      }
    },
    "ContinueWatchingListData": {
      "type": "object",
      "description": "List data for ContinueWatching List",
      "additionalProperties": false,
      "properties": {
        "itemInclusions": {
          "type": "object",
          "description": "Object where keys are itemIds for the items in the list and values are objects\ncontaining additional items (either episode/season/show) that were requested\nin the \"include\" query option.\n\nFor example if you request the ContinueWatching list with \"season\" items in\nthe list, you can specify `include=episode` and then the specific next episode\nwill be returned in this object.\n",
          "additionalProperties": {
            "$ref": "#/definitions/ContinueWatchingListDataExpansion"
          }
        }
      }
    },
    "ContinueWatchingListDataExpansion": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "episode": {
          "$ref": "#/definitions/ItemSummary"
        },
        "season": {
          "$ref": "#/definitions/ItemSummary"
        },
        "show": {
          "$ref": "#/definitions/ItemSummary"
        }
      }
    },
    "Credit": {
      "allOf": [
        {
          "$ref": "#/definitions/Person"
        },
        {
          "type": "object",
          "required": [
            "role"
          ],
          "properties": {
            "role": {
              "description": "The type of role the credit performed, e.g. actor.",
              "type": "string",
              "enum": [
                "actor",
                "associateproducer",
                "coactor",
                "director",
                "executiveproducer",
                "filminglocation",
                "guest",
                "narrator",
                "other",
                "presenter",
                "producer",
                "productmanager",
                "thememusicby",
                "voice",
                "writer"
              ]
            },
            "character": {
              "description": "The name of the character.",
              "type": "string"
            }
          }
        }
      ]
    },
    "Device": {
      "x-emoji": "📱",
      "type": "object",
      "required": [
        "id",
        "name",
        "registrationDate",
        "type"
      ],
      "additionalProperties": false,
      "properties": {
        "id": {
          "description": "The unique identifier for this device e.g. serial number.",
          "type": "string"
        },
        "name": {
          "description": "The human recognisable name for this device.",
          "type": "string"
        },
        "registrationDate": {
          "description": "The date this device was registered.",
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "description": "The device type e.g. web_browser.",
          "type": "string"
        }
      }
    },
    "DeviceAuthorizationCode": {
      "type": "object",
      "required": [
        "code"
      ],
      "additionalProperties": false,
      "properties": {
        "code": {
          "description": "The generated device authorization code.",
          "type": "string"
        }
      }
    },
    "DeviceRegistrationRequest": {
      "type": "object",
      "required": [
        "id",
        "name",
        "type"
      ],
      "additionalProperties": false,
      "properties": {
        "id": {
          "description": "The unique identifier for this device e.g. serial number.",
          "type": "string"
        },
        "name": {
          "description": "A human recognisable name for this device.",
          "type": "string"
        },
        "type": {
          "description": "The device type e.g. web_browser.",
          "type": "string"
        }
      }
    },
    "DeviceRegistrationWindow": {
      "type": "object",
      "required": [
        "periodDays",
        "limit",
        "remaining",
        "startDate",
        "endDate"
      ],
      "additionalProperties": false,
      "properties": {
        "periodDays": {
          "description": "The number of days a de/registration period runs for.",
          "type": "integer",
          "format": "int32"
        },
        "limit": {
          "description": "The maximum de/registrations that can be made in a period.",
          "type": "integer",
          "format": "int32"
        },
        "remaining": {
          "description": "The remaining de/registrations that can be made in the current period.",
          "type": "integer",
          "format": "int32"
        },
        "startDate": {
          "description": "The start date of the current period.\n\nThis is based on the earliest device de/registrations in the past N days, where\nN is defined by `periodDays`.\n\nIf no device has been de/registered then start date will be from the current date.\n",
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "description": "The end date of the current period.\n\nThis is based on the value of `startDate` plus the number of days defined by  `periodDays`.\n",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "EeBtEligibility": {
      "type": "object",
      "required": [
        "eligible"
      ],
      "additionalProperties": false,
      "properties": {
        "plan": {
          "description": "The identifier of a plan.",
          "type": "string"
        },
        "source": {
          "description": "Stripe etc.",
          "type": "string"
        },
        "eligible": {
          "description": "Whether or not user is eligible",
          "type": "boolean"
        }
      }
    },
    "EeCreatePinRequest": {
      "type": "object",
      "required": [
        "msisdn",
        "accessToken"
      ],
      "additionalProperties": false,
      "properties": {
        "msisdn": {
          "description": "The msisdn.",
          "type": "string"
        },
        "accessToken": {
          "description": "EE API authorization Token received from GET /ee/token/create.",
          "type": "string"
        },
        "trackingHeader": {
          "description": "trackingHeader",
          "type": "string"
        }
      },
      "example": {
        "msisdn": "447931234567",
        "accessToken": "wxg0fG4GQjBQVjAT0AhKxSkrxFbs",
        "trackingHeader": "1234E682-2C74-46A4-B8B3-5BBD3B3E165D"
      }
    },
    "EeCreatePinResponse": {
      "type": "object",
      "required": [
        "pinReference",
        "trackingHeader"
      ],
      "additionalProperties": false,
      "properties": {
        "pinReference": {
          "description": "The pinReference.",
          "type": "string"
        },
        "trackingHeader": {
          "description": "trackingHeader",
          "type": "string"
        }
      }
    },
    "EeCreateTokenResponse": {
      "type": "object",
      "required": [
        "token"
      ],
      "additionalProperties": false,
      "properties": {
        "accessToken": {
          "description": "The authentication token for later use to call EE endpoints.",
          "type": "string"
        },
        "tokenType": {
          "type": "string"
        },
        "expiresIn": {
          "type": "number"
        }
      }
    },
    "EeIdentityRequest": {
      "type": "object",
      "required": [
        "sessionId",
        "accessToken"
      ],
      "additionalProperties": false,
      "properties": {
        "sessionId": {
          "description": "The sessionId returned in the ee/session response.",
          "type": "string"
        },
        "accessToken": {
          "description": "EE API authorization Token received from GET /ee/token/create.",
          "type": "string"
        }
      },
      "example": {
        "sessionId": "7897E682-2C74-46A4-B8B3-5BBD3B3E165D",
        "accessToken": "wxg0fG4GQjBQVjAT0AhKxSkrxFbs"
      }
    },
    "EeIdentityResponse": {
      "type": "object",
      "required": [
        "msisdn",
        "trackingHeader"
      ],
      "additionalProperties": false,
      "properties": {
        "msisdn": {
          "description": "The msisdn.",
          "type": "string"
        },
        "brand": {
          "description": "The operator brand.",
          "type": "string"
        },
        "brandCode": {
          "description": "The brand code.",
          "type": "string"
        },
        "trackingHeader": {
          "description": "trackingHeader",
          "type": "string"
        }
      }
    },
    "EeOfferItem": {
      "x-emoji": "💳",
      "type": "object",
      "required": [
        "name"
      ],
      "additionalProperties": false,
      "properties": {
        "name": {
          "description": "The identifier of an offer.",
          "type": "string"
        }
      }
    },
    "EeOffersRequest": {
      "type": "object",
      "required": [
        "msisdn",
        "accessToken"
      ],
      "additionalProperties": false,
      "properties": {
        "msisdn": {
          "description": "The msisdn.",
          "type": "string"
        },
        "accessToken": {
          "description": "EE API authorization Token received from GET /ee/token/create.",
          "type": "string"
        },
        "trackingHeader": {
          "description": "trackingHeader.",
          "type": "string"
        }
      },
      "example": {
        "msisdn": "447931234567",
        "accessToken": "wxg0fG4GQjBQVjAT0AhKxSkrxFbs",
        "trackingHeader": "1234E682-2C74-46A4-B8B3-5BBD3B3E165D"
      }
    },
    "EeOffersResponse": {
      "type": "object",
      "required": [
        "eligibleOffers"
      ],
      "additionalProperties": false,
      "properties": {
        "eligibleOffers": {
          "description": "The list of eligible offers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EeOfferItem"
          }
        }
      }
    },
    "EePlanListItem": {
      "x-emoji": "💳",
      "type": "object",
      "required": [
        "id",
        "nickname",
        "product",
        "currency",
        "trialPeriodDays",
        "description",
        "heroText",
        "ctaText",
        "headerText",
        "longText"
      ],
      "additionalProperties": false,
      "properties": {
        "id": {
          "description": "The identifier of a plan.",
          "type": "string"
        },
        "nickname": {
          "description": "The title of a plan.",
          "type": "string"
        },
        "product": {
          "description": "The product of a plan.",
          "type": "string"
        },
        "currency": {
          "description": "The currency a plan is offered in.",
          "type": "string"
        },
        "amount": {
          "description": "The price of a plan. If a free plan then undefined.",
          "type": "number",
          "format": "float"
        },
        "interval": {
          "description": "The type of billing period used.",
          "type": "string",
          "enum": [
            "day",
            "week",
            "month",
            "year",
            "none"
          ]
        },
        "intervalCount": {
          "description": "Given the `interval` this is how frequently it will run. e.g. every 2 weeks.",
          "type": "integer",
          "format": "int32"
        },
        "trialPeriodDays": {
          "description": "How many days a trial period runs for a plan. Only valid if `hasTrialPeriod` is true.",
          "type": "integer",
          "format": "int32"
        },
        "description": {
          "description": "The textual description.",
          "type": "string"
        },
        "heroText": {
          "description": "The textual description.",
          "type": "string"
        },
        "ctaText": {
          "description": "The textual description.",
          "type": "string"
        },
        "headerText": {
          "description": "The textual description.",
          "type": "string"
        },
        "longText": {
          "description": "The textual description.",
          "type": "string"
        }
      }
    },
    "EePlans": {
      "type": "object",
      "required": [
        "plans"
      ],
      "additionalProperties": false,
      "properties": {
        "plans": {
          "description": "The list of available plans.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EePlanListItem"
          }
        }
      }
    },
    "EeSessionIdRequest": {
      "type": "object",
      "required": [
        "clientIP",
        "accessToken"
      ],
      "additionalProperties": false,
      "properties": {
        "clientIP": {
          "description": "The IP address of the requesting device.",
          "type": "string"
        },
        "accessToken": {
          "description": "EE API authorization Token received from GET /ee/token/create.",
          "type": "string"
        }
      },
      "example": {
        "clientIP": "123.456.789",
        "accessToken": "xxxDDxBoHnNG1qYWutsRqE0dHxxx"
      }
    },
    "EeSessionIdResponse": {
      "type": "object",
      "required": [
        "sessionId"
      ],
      "additionalProperties": false,
      "properties": {
        "sessionId": {
          "description": "The assigned SessionId.",
          "type": "string"
        }
      }
    },
    "EeValidatePinRequest": {
      "type": "object",
      "required": [
        "pinReference",
        "pin",
        "accessToken"
      ],
      "additionalProperties": false,
      "properties": {
        "pinReference": {
          "description": "The pinReference.",
          "type": "string"
        },
        "pin": {
          "description": "The pin entered by a user. 6 digits",
          "type": "string"
        },
        "accessToken": {
          "description": "EE API authorization Token received from GET /ee/token/create.",
          "type": "string"
        },
        "trackingHeader": {
          "description": "Tracking header to be able to search logs for a specific user requests. If not provided it will be generated. FE should store it for later user.",
          "type": "string"
        }
      },
      "example": {
        "pinReference": "9897222307534",
        "pin": "123456",
        "accessToken": "wxg0fG4GQjBQVjAT0AhKxSkrxFbs",
        "trackingHeader": "1234E682-2C74-46A4-B8B3-5BBD3B3E165D"
      }
    },
    "EeValidatePinResponse": {
      "type": "object",
      "required": [
        "validationStatus",
        "trackingHeader"
      ],
      "additionalProperties": false,
      "properties": {
        "pinValid": {
          "description": "The validation status.",
          "type": "string"
        },
        "trackingHeader": {
          "description": "trackingHeader",
          "type": "string"
        }
      }
    },
    "Entitlement": {
      "allOf": [
        {
          "$ref": "#/definitions/OfferRights"
        },
        {
          "x-emoji": "🎟",
          "type": "object",
          "properties": {
            "activationDate": {
              "description": "The date of activation. If no date is defined the entitlement has not be activated.",
              "type": "string",
              "format": "date-time"
            },
            "expirationDate": {
              "description": "The date the entitlement expires.",
              "type": "string",
              "format": "date-time"
            },
            "creationDate": {
              "description": "The date the entitlement was created.",
              "type": "string",
              "format": "date-time"
            },
            "playCount": {
              "description": "How many times the media has been played.",
              "type": "integer",
              "format": "int32"
            },
            "remainingDownloads": {
              "description": "How many more downloads of this media are available.",
              "type": "integer",
              "format": "int32"
            },
            "itemId": {
              "description": "The id of the item this entitlement is for.",
              "type": "string"
            },
            "itemType": {
              "description": "The type of item this entitlement is for.",
              "type": "string",
              "enum": [
                "movie",
                "show",
                "season",
                "episode",
                "program",
                "link",
                "trailer",
                "channel",
                "customAsset"
              ],
              "x-enumEmoji": {
                "movie": "🎬",
                "show": "📺",
                "season": "📺",
                "episode": "📺",
                "program": "🎟",
                "link": "🔗",
                "trailer": "🖥",
                "channel": "📺"
              }
            },
            "planId": {
              "description": "The id of the plan this entitlement is for.",
              "type": "string"
            },
            "mediaDuration": {
              "description": "The duration of the entitled media.",
              "type": "integer",
              "format": "int32"
            },
            "classification": {
              "description": "The classification of the entitled item.",
              "$ref": "#/definitions/ClassificationSummary"
            }
          }
        }
      ]
    },
    "ExclusionRule": {
      "x-emoji": "⛔️",
      "type": "object",
      "description": "Defines playback exclusion rules for an Offer or Entitlement.",
      "additionalProperties": false,
      "properties": {
        "description": {
          "type": "string"
        },
        "device": {
          "description": "The device type that the exclusion rules apply to.",
          "type": "string"
        },
        "excludeAirplay": {
          "description": "Prevent airplay from an apple device.",
          "type": "boolean"
        },
        "excludeChromecast": {
          "description": "Prevent chromecasting.",
          "type": "boolean"
        },
        "excludeDelivery": {
          "type": "string",
          "enum": [
            "Stream",
            "Download",
            "StreamOrDownload",
            "ProgressiveDownload",
            "None"
          ]
        },
        "excludeMinResolution": {
          "type": "string",
          "enum": [
            "SD",
            "HD-720",
            "HD-1080",
            "HD-4K",
            "External",
            "Unknown"
          ]
        }
      }
    },
    "ItemClipFile": {
      "x-emoji": "📀",
      "type": "object",
      "required": [
        "Name",
        "DeliveryType",
        "Url",
        "Drm",
        "FileFormat",
        "Resolution",
        "Width",
        "Height",
        "LanguageCode"
      ],
      "additionalProperties": true,
      "properties": {
        "Name": {
          "description": "The name of the media file.",
          "type": "string"
        },
        "DeliveryType": {
          "description": "The way in which the media file is delivered.",
          "type": "string",
          "enum": [
            "Stream",
            "Progressive",
            "Download"
          ]
        },
        "Url": {
          "description": "The url to access the media file.",
          "type": "string",
          "format": "uri"
        },
        "Drm": {
          "description": "The type of drm used to encrypt the media. 'None' if unencrypted.",
          "type": "string"
        },
        "FileFormat": {
          "description": "The format the media was encoded in.",
          "type": "string"
        },
        "Resolution": {
          "description": "The resolution of the video media.",
          "type": "string",
          "enum": [
            "SD",
            "HD-720",
            "HD-1080",
            "HD-4K",
            "External",
            "Unknown"
          ]
        },
        "Width": {
          "description": "The width of the video media.",
          "type": "integer",
          "format": "int32"
        },
        "Height": {
          "description": "The height of the video media.",
          "type": "integer",
          "format": "int32"
        },
        "Channels": {
          "description": "The number of audio channels.",
          "type": "integer",
          "format": "int32"
        },
        "LanguageCode": {
          "description": "The language code for the media, e.g. 'en'.",
          "type": "string"
        }
      }
    },
    "ItemClipFiles": {
      "type": "object",
      "required": [
        "id",
        "clips"
      ],
      "properties": {
        "id": {
          "description": "Unique identifier for an Item",
          "type": "string"
        },
        "clips": {
          "description": "Array of item clip file.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ItemClipFile"
          }
        }
      }
    },
    "ItemClipFilesList": {
      "x-emoji": "📚",
      "type": "object",
      "required": [
        "items"
      ],
      "description": "A list of items with its clip files.",
      "additionalProperties": false,
      "properties": {
        "items": {
          "type": "array",
          "description": "A list of items",
          "items": {
            "$ref": "#/definitions/ItemClipFiles"
          }
        }
      }
    },
    "ItemCustomMetadata": {
      "type": "object",
      "description": "Custom metadata associated with an item.",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "description": "The name of the custom metadata.",
          "type": "string"
        },
        "value": {
          "description": "The value of the custom metadata.",
          "type": "string"
        }
      }
    },
    "ItemDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/ItemSummary"
        },
        {
          "type": "object",
          "properties": {
            "copyright": {
              "description": "Copyright information about this item",
              "type": "string"
            },
            "distributor": {
              "description": "The distributor of this item.",
              "type": "string"
            },
            "description": {
              "description": "The description of this item.",
              "type": "string"
            },
            "customMetadata": {
              "description": "An ordered list of custom name-value-pair item metadata.\n\nUsually displayed on an item detail page.\n",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ItemCustomMetadata"
              }
            },
            "genrePaths": {
              "description": "An array of genre paths mapping to the values within the `genres` array from ItemSummary.\n",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "location": {
              "description": "The optional location (e.g. city) of an event.\nSpecific to a Program item type.\n",
              "type": "string"
            },
            "venue": {
              "description": "The optional venue of an event.\nSpecific to a Program item type.\n",
              "type": "string"
            },
            "eventDate": {
              "description": "The optional date of an event.\nSpecific to a Program item type.\n",
              "type": "string",
              "format": "date-time"
            },
            "credits": {
              "description": "A list of credits associated with this item.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Credit"
              }
            },
            "seasons": {
              "description": "A list of seasons associated with this item.",
              "$ref": "#/definitions/ItemList"
            },
            "episodes": {
              "description": "A list of episodes associated with this item.",
              "$ref": "#/definitions/ItemList"
            },
            "season": {
              "description": "The season associated with this item.",
              "$ref": "#/definitions/ItemDetail"
            },
            "show": {
              "description": "The season associated with this item.",
              "$ref": "#/definitions/ItemDetail"
            },
            "trailers": {
              "description": "A list of trailers associated with this item.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ItemSummary"
              }
            }
          }
        }
      ]
    },
    "ItemDownloadable": {
      "x-emoji": "📘",
      "type": "object",
      "required": [
        "id",
        "downloadable"
      ],
      "discriminator": "type",
      "properties": {
        "id": {
          "description": "Unique identifier for an Item",
          "type": "string"
        },
        "downloadable": {
          "description": "is the item downloadable?",
          "type": "boolean"
        }
      }
    },
    "ItemDownloadableList": {
      "x-emoji": "📚",
      "type": "object",
      "required": [
        "items"
      ],
      "description": "A list of items downloadable data.",
      "additionalProperties": false,
      "properties": {
        "items": {
          "type": "array",
          "description": "A list of items",
          "items": {
            "$ref": "#/definitions/ItemDownloadable"
          }
        }
      }
    },
    "ItemDownloadableRequest": {
      "type": "object",
      "required": [
        "ids"
      ],
      "additionalProperties": false,
      "properties": {
        "ids": {
          "description": "Comma-separated list of AXIS item ids.",
          "type": "string"
        }
      },
      "example": {
        "ids": "1234,2345,3456"
      }
    },
    "ItemList": {
      "x-emoji": "📚",
      "type": "object",
      "required": [
        "id",
        "size",
        "items",
        "paging",
        "path"
      ],
      "description": "A pageable list of items.",
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of this list"
        },
        "title": {
          "type": "string",
          "description": "The title of this list"
        },
        "description": {
          "type": "string",
          "description": "A full description of this list."
        },
        "shortDescription": {
          "type": "string",
          "description": "A short description of this list."
        },
        "tagline": {
          "type": "string",
          "description": "The tagline of the item."
        },
        "path": {
          "type": "string",
          "description": "The path of this list"
        },
        "itemTypes": {
          "type": "array",
          "description": "The types of items in the list",
          "items": {
            "type": "string",
            "enum": [
              "movie",
              "show",
              "season",
              "episode",
              "program",
              "link",
              "trailer",
              "channel",
              "customAsset"
            ],
            "x-enumEmoji": {
              "movie": "🎬",
              "show": "📺",
              "season": "📺",
              "episode": "📺",
              "program": "🎟",
              "link": "🔗",
              "trailer": "🖥",
              "channel": "📺"
            }
          }
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "description": "The total size of the list"
        },
        "items": {
          "type": "array",
          "description": "A list of items",
          "items": {
            "$ref": "#/definitions/ItemSummary"
          }
        },
        "images": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "uri"
          }
        },
        "parameter": {
          "type": "string",
          "description": "If this list is parameterized, then this contains the parameter of the list in the format `name:value`.\nFor example the Movies Genre list will take a parameter `genre` with a given value. e.g. `genre:action` or `genre:drama`."
        },
        "paging": {
          "$ref": "#/definitions/Pagination",
          "description": "Metadata describing how to load the next or previous page of the list"
        },
        "customFields": {
          "description": "A map of custom fields defined by a curator for a list.",
          "type": "object",
          "additionalProperties": true
        },
        "themes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Theme"
          }
        },
        "listData": {
          "description": "Extra data needed for the specific list. The format and content will change\ndepending on the list\n",
          "$ref": "#/definitions/ListData"
        }
      }
    },
    "ItemPurchase": {
      "x-emoji": "💰",
      "type": "object",
      "required": [
        "id",
        "ownership",
        "resolution",
        "title",
        "type"
      ],
      "additionalProperties": false,
      "properties": {
        "id": {
          "description": "The identifier of the purchased item.",
          "type": "string"
        },
        "ownership": {
          "description": "The ownership of the purchased item.",
          "type": "string",
          "enum": [
            "Subscription",
            "Free",
            "Rent",
            "Own",
            "None"
          ]
        },
        "resolution": {
          "description": "The resolution of the purchased item.",
          "type": "string",
          "enum": [
            "SD",
            "HD-720",
            "HD-1080",
            "HD-4K",
            "External",
            "Unknown"
          ]
        },
        "title": {
          "description": "The title of the purchased item.",
          "type": "string"
        },
        "type": {
          "description": "The type of item purchased.",
          "type": "string",
          "enum": [
            "movie",
            "show",
            "season",
            "episode",
            "program",
            "link",
            "trailer",
            "channel",
            "customAsset"
          ],
          "x-enumEmoji": {
            "movie": "🎬",
            "show": "📺",
            "season": "📺",
            "episode": "📺",
            "program": "🎟",
            "link": "🔗",
            "trailer": "🖥",
            "channel": "📺"
          }
        }
      }
    },
    "ItemSchedule": {
      "x-emoji": "⏳",
      "type": "object",
      "required": [
        "id",
        "channelId",
        "startDate",
        "endDate"
      ],
      "additionalProperties": true,
      "properties": {
        "id": {
          "type": "string"
        },
        "channelId": {
          "description": "The id of the channel item this schedule belongs to.",
          "type": "string"
        },
        "startDate": {
          "description": "The date and time this schedule starts.",
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "description": "The date and time this schedule ends.",
          "type": "string",
          "format": "date-time"
        },
        "repeat": {
          "description": "True if this has been aired previously on the same channel.",
          "type": "boolean"
        },
        "live": {
          "description": "True if this is a live event.",
          "type": "boolean"
        },
        "featured": {
          "description": "True if this is a featured item schedule.",
          "type": "boolean"
        },
        "blackout": {
          "description": "True if this schedule represents time when the channel is completely off air.",
          "type": "boolean"
        }
      }
    },
    "ItemScheduleList": {
      "type": "object",
      "required": [
        "channelId",
        "startDate",
        "endDate",
        "schedules"
      ],
      "additionalProperties": false,
      "properties": {
        "channelId": {
          "description": "The id of the channel the schedules belong to.",
          "type": "string"
        },
        "startDate": {
          "description": "The date and time this list of schedules starts.",
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "description": "The date and time this list of schedules ends.",
          "type": "string",
          "format": "date-time"
        },
        "schedules": {
          "description": "The list of item schedules.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ItemSchedule"
          }
        }
      }
    },
    "ItemSummary": {
      "x-emoji": "📘",
      "type": "object",
      "required": [
        "id",
        "type",
        "path",
        "title"
      ],
      "discriminator": "type",
      "properties": {
        "id": {
          "description": "Unique identifier for an Item",
          "type": "string"
        },
        "type": {
          "description": "The type of item",
          "type": "string",
          "enum": [
            "movie",
            "show",
            "season",
            "episode",
            "program",
            "link",
            "trailer",
            "channel",
            "customAsset"
          ],
          "x-enumEmoji": {
            "movie": "🎬",
            "show": "📺",
            "season": "📺",
            "episode": "📺",
            "program": "🎟",
            "link": "🔗",
            "trailer": "🖥",
            "channel": "📺"
          }
        },
        "subtype": {
          "description": "Subtype of the item. Mainly used to identify different types when `type`\nis `customAsset`\n",
          "type": "string"
        },
        "title": {
          "description": "The display title of the item.",
          "type": "string"
        },
        "shortDescription": {
          "description": "A truncated description of the item",
          "type": "string"
        },
        "tagline": {
          "description": "The tagline of the item",
          "type": "string"
        },
        "classification": {
          "description": "The classification rating of this item.",
          "$ref": "#/definitions/ClassificationSummary"
        },
        "advisoryText": {
          "description": "Advisory text about this item, related to the classification",
          "type": "string"
        },
        "path": {
          "description": "The path to the detail page of this item. Can be used to load the item detail page via the /page endpoint.",
          "type": "string"
        },
        "watchPath": {
          "description": "The path to watch this item, if the item is a watchable type, e.g. a `movie`, `program` and `episode`.",
          "type": "string"
        },
        "scopes": {
          "description": "The scopes for this item",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "releaseYear": {
          "description": "The year this item was released",
          "type": "integer",
          "format": "int32"
        },
        "episodeCount": {
          "description": "The number of episodes in the season, if the item is a season.",
          "type": "integer",
          "format": "int32"
        },
        "availableEpisodeCount": {
          "description": "The number of available episodes in the season, if the item is a season.",
          "type": "integer",
          "format": "int32"
        },
        "availableSeasonCount": {
          "description": "The number of available seasons in the show, if the item is a show.",
          "type": "integer",
          "format": "int32"
        },
        "availableSpecialCount": {
          "description": "The number of available specials in the item.",
          "type": "integer",
          "format": "int32"
        },
        "seasonNumber": {
          "description": "The number of a season, if the item is a season.",
          "type": "integer",
          "format": "int32"
        },
        "episodeNumber": {
          "description": "The number of an episode, if the item is an episode.",
          "type": "integer",
          "format": "int32"
        },
        "episodeName": {
          "description": "The full name of an episode.",
          "type": "string"
        },
        "showId": {
          "description": "The identifier of the show this item belongs to, if the item is a season or episode.",
          "type": "string"
        },
        "showTitle": {
          "descritpion": "The title of the show this item belongs to, if the item is a season or episode.",
          "type": "string"
        },
        "seasonId": {
          "description": "The identifier of the season this item belongs to, if the item is an episode.",
          "type": "string"
        },
        "channelShortCode": {
          "description": "The channel short code, if the item is a channel.",
          "type": "string"
        },
        "hasClosedCaptions": {
          "description": "Whether closed captioning is available.",
          "type": "boolean"
        },
        "averageUserRating": {
          "description": "The average user rating.\nWhen based on user ratings from our system this will be out of 10.\n",
          "type": "number",
          "format": "int32",
          "minimum": 0
        },
        "badge": {
          "description": "The badge this item has.",
          "type": "string"
        },
        "genres": {
          "description": "The array of genres this item belongs to.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "duration": {
          "description": "The duration of the media in seconds.",
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "customId": {
          "description": "A custom identifier for this item.\nFor example the id for this item under a different content system.\n",
          "type": "string"
        },
        "offers": {
          "description": "The array of available offers for this item.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Offer"
          }
        },
        "images": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "uri"
          }
        },
        "themes": {
          "description": "Gets themes associated with the item",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Theme"
          }
        },
        "customFields": {
          "description": "A map of custom fields defined by a curator for an item.",
          "type": "object",
          "additionalProperties": true
        }
      }
    },
    "ItvAssignBtTokenRequest": {
      "type": "object",
      "required": [
        "token",
        "profileToken"
      ],
      "additionalProperties": false,
      "properties": {
        "token": {
          "description": "The validated userToken.",
          "type": "string"
        },
        "profileToken": {
          "description": "The ITV profile token",
          "type": "string"
        }
      }
    },
    "ItvAssignMsisdnRequest": {
      "type": "object",
      "required": [
        "msisdn",
        "profileToken",
        "trackingHeader",
        "eeProductId"
      ],
      "additionalProperties": false,
      "properties": {
        "msisdn": {
          "description": "The validated msisdn.",
          "type": "string"
        },
        "profileToken": {
          "description": "The ITV profile token",
          "type": "string"
        },
        "trackingHeader": {
          "description": "trackingHeader",
          "type": "string"
        },
        "eeProductId": {
          "description": "Product id from /ee/offers",
          "type": "string"
        }
      }
    },
    "ItvBillingHistory": {
      "x-emoji": "💳",
      "type": "object",
      "required": [
        "payment_history"
      ],
      "additionalProperties": false,
      "properties": {
        "payment_history": {
          "description": "The array of objects with subscription payment details.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ItvBillingHistoryRecord"
          }
        }
      }
    },
    "ItvBillingHistoryRecord": {
      "x-emoji": "💳",
      "type": "object",
      "required": [
        "card",
        "subscription",
        "invoice",
        "charge"
      ],
      "additionalProperties": false,
      "properties": {
        "card": {
          "description": "The card info.",
          "type": "object"
        },
        "subscription": {
          "description": "The object with subscription payment details.",
          "type": "object"
        },
        "invoice": {
          "description": "The object with invoice details.",
          "type": "object"
        },
        "charge": {
          "description": "The amount charged.",
          "type": "object"
        }
      }
    },
    "ItvBillingHistoryRequest": {
      "type": "object",
      "required": [
        "profileToken"
      ],
      "additionalProperties": false,
      "properties": {
        "profileToken": {
          "description": "The ITV profile token.",
          "type": "string"
        }
      }
    },
    "ItvCancelSubscriptionRequest": {
      "type": "object",
      "required": [
        "profileToken"
      ],
      "additionalProperties": false,
      "properties": {
        "profileToken": {
          "description": "The ITV profile token.",
          "type": "string"
        }
      }
    },
    "ItvCardDetails": {
      "x-emoji": "💳",
      "type": "object",
      "required": [
        "card_type",
        "last4",
        "exp_month",
        "exp_year"
      ],
      "additionalProperties": false,
      "properties": {
        "card_type": {
          "description": "The payment card type (Visa/Mastercard/etc).",
          "type": "string"
        },
        "last4": {
          "description": "The last 4 digit of card number.",
          "type": "string"
        },
        "exp_month": {
          "description": "Expiry date month.",
          "type": "integer",
          "format": "int32"
        },
        "exp_year": {
          "description": "Expiry date year.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ItvChangeCardDetailsRequest": {
      "type": "object",
      "required": [
        "profileToken",
        "cardToken"
      ],
      "additionalProperties": false,
      "properties": {
        "profileToken": {
          "description": "The ITV profile token.",
          "type": "string"
        },
        "cardToken": {
          "description": "The credit card token.",
          "type": "string"
        }
      }
    },
    "ItvChangeEmailRequest": {
      "type": "object",
      "required": [
        "email",
        "profileToken"
      ],
      "additionalProperties": false,
      "properties": {
        "email": {
          "description": "New email address for account/profile.",
          "type": "string"
        },
        "profileToken": {
          "description": "The ITV profile token.",
          "type": "string"
        }
      }
    },
    "ItvChangeMarketingRequest": {
      "type": "object",
      "required": [
        "emailOptIn",
        "profileToken"
      ],
      "additionalProperties": false,
      "properties": {
        "emailOptIn": {
          "description": "Updated marketing preferences for account/profile.",
          "type": "boolean"
        },
        "profileToken": {
          "description": "The ITV profile token.",
          "type": "string"
        }
      }
    },
    "ItvCurrentSubscription": {
      "x-emoji": "💰",
      "type": "object",
      "required": [
        "collectionMethod",
        "cancelAtPeriodEnd",
        "created",
        "currentPeriodEnd",
        "currentPeriodStart",
        "plan",
        "status"
      ],
      "additionalProperties": false,
      "properties": {
        "collectionMethod": {
          "description": "The description of payment collection method.",
          "type": "string"
        },
        "cancelAtPeriodEnd": {
          "description": "The cancellation period end flag.",
          "type": "boolean"
        },
        "created": {
          "description": "The creation timestamp.",
          "type": "integer",
          "format": "int32"
        },
        "currentPeriodEnd": {
          "description": "The end of period timestamp.",
          "type": "integer",
          "format": "int32"
        },
        "currentPeriodStart": {
          "description": "The start of period timestamp.",
          "type": "integer",
          "format": "int32"
        },
        "plan": {
          "description": "The plan used during subsribing.",
          "type": "object"
        },
        "status": {
          "description": "The status of subscription.",
          "type": "string"
        }
      }
    },
    "ItvDeleteAccountRequest": {
      "type": "object",
      "required": [
        "profileToken"
      ],
      "additionalProperties": false,
      "properties": {
        "profileToken": {
          "description": "The ITV profile token.",
          "type": "string"
        }
      }
    },
    "ItvEntitlement": {
      "x-emoji": "💳",
      "type": "object",
      "required": [
        "start",
        "expiry",
        "source",
        "subscriptionId",
        "plan"
      ],
      "additionalProperties": false,
      "properties": {
        "card_type": {
          "description": "Start of subscription.",
          "type": "string",
          "format": "date-time"
        },
        "expiry": {
          "description": "Expiry of subscription.",
          "type": "string",
          "format": "date-time"
        },
        "source": {
          "description": "Source platform of purchase.",
          "type": "string"
        },
        "subscriptionId": {
          "description": "Id of subscription.",
          "type": "string"
        },
        "plan": {
          "description": "Purchased plan data.",
          "type": "object"
        }
      }
    },
    "ItvEntitlementCancelation": {
      "x-emoji": "💳",
      "type": "object",
      "required": [
        "itvId",
        "source",
        "cancelled_at",
        "subscriptionId"
      ],
      "additionalProperties": false,
      "properties": {
        "itvId": {
          "description": "Itv internal id.",
          "type": "string"
        },
        "source": {
          "description": "Source platform of cancelation.",
          "type": "string"
        },
        "cancelled_at": {
          "description": "Cancelation datetime.",
          "type": "string",
          "format": "date-time"
        },
        "subscriptionId": {
          "description": "Id of subscription.",
          "type": "string"
        }
      }
    },
    "ItvEntitlementCurrent": {
      "type": "object",
      "required": [
        "source"
      ],
      "additionalProperties": false,
      "properties": {
        "source": {
          "description": "one of “itunes”, “stripe”, “amazon”, “google”",
          "type": "string"
        }
      }
    },
    "ItvEntitlementPlan": {
      "x-emoji": "💳",
      "type": "object",
      "required": [
        "type",
        "interval",
        "cost",
        "trialLength"
      ],
      "additionalProperties": false,
      "properties": {
        "type": {
          "description": "Type of the plan.",
          "type": "string"
        },
        "interval": {
          "description": "The type of billing period used.",
          "type": "string",
          "enum": [
            "day",
            "week",
            "month",
            "year",
            "none"
          ]
        },
        "cost": {
          "description": "Source platform of purchase.",
          "type": "integer",
          "format": "int32"
        },
        "trialLength": {
          "description": "Given the `interval` this is how frequently it will run. e.g. every 2 weeks.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ItvEntitlementsHistory": {
      "x-emoji": "💳",
      "type": "object",
      "required": [
        "entitlements",
        "cancellations"
      ],
      "additionalProperties": false,
      "properties": {
        "entitlements": {
          "description": "The results of availability checks.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ItvEntitlement"
          }
        },
        "cancellations": {
          "description": "The results of availability checks.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ItvEntitlementCancelation"
          }
        }
      }
    },
    "ItvFeatureFlag": {
      "x-emoji": "💳",
      "type": "object",
      "required": [
        "enabled"
      ],
      "additionalProperties": false,
      "properties": {
        "enabled": {
          "description": "Is the feature enabled?",
          "type": "boolean"
        },
        "flag": {
          "description": "Feature flag data.",
          "type": "string"
        }
      }
    },
    "ItvGetCardDetailsRequest": {
      "type": "object",
      "required": [
        "profileToken"
      ],
      "additionalProperties": false,
      "properties": {
        "profileToken": {
          "description": "The ITV profile token.",
          "type": "string"
        }
      }
    },
    "ItvGetDiscountResponse": {
      "x-emoji": "💳",
      "type": "object",
      "required": [
        "id"
      ],
      "additionalProperties": false,
      "properties": {
        "id": {
          "description": "The if of a discount for a user.",
          "type": "string"
        },
        "nickname": {
          "description": "Discount nickname.",
          "type": "string"
        },
        "longDescription": {
          "description": "Long description",
          "type": "string"
        },
        "shortDescription": {
          "description": "Short description",
          "type": "string"
        },
        "headline": {
          "description": "Headline",
          "type": "string"
        },
        "description": {
          "description": "Description",
          "type": "string"
        },
        "currency": {
          "description": "Payment currency.",
          "type": "string"
        },
        "offerdurationperiod": {
          "description": "How long the descount will be valid for.",
          "type": "string"
        },
        "initialCost": {
          "description": "The initial cost.",
          "type": "number"
        }
      }
    },
    "ItvGooglePaySubscriptionRequest": {
      "type": "object",
      "required": [
        "purchaseToken",
        "subscriptionItem"
      ],
      "additionalProperties": false,
      "properties": {
        "purchaseToken": {
          "description": "the unique identifier for this purchase",
          "type": "string"
        },
        "subscriptionItem": {
          "description": "the SKU of the item from the play console",
          "type": "string"
        }
      }
    },
    "ItvHadEntitlement": {
      "type": "object",
      "required": [
        "hasHadEntitlements"
      ],
      "additionalProperties": false,
      "properties": {
        "hasHadEntitlements": {
          "description": "whether the user has been previously entitlement",
          "type": "boolean"
        }
      }
    },
    "ItvPinAuthRequest": {
      "type": "object",
      "required": [
        "pin"
      ],
      "additionalProperties": false,
      "properties": {
        "pin": {
          "description": "The 4-digit parental control pin.",
          "type": "string"
        },
        "scopes": {
          "description": "The scope(s) of the token(s) required.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Catalog",
              "Commerce",
              "Settings",
              "Playback"
            ]
          }
        },
        "cookieType": {
          "description": "If you specify a cookie type then a content filter cookie will be returned\nalong with the token(s). This is only intended for web based clients which\nneed to pass the cookies to a server to render a page based on the user's\ncontent filters e.g subscription code.\n\nIf type `Session` the cookie will be session based.\nIf type `Persistent` the cookie will have a medium term lifespan.\nIf undefined no cookies will be set.\n",
          "type": "string",
          "enum": [
            "Session",
            "Persistent"
          ]
        }
      }
    },
    "ItvPlanListItem": {
      "x-emoji": "💳",
      "type": "object",
      "required": [
        "id",
        "nickname",
        "amount",
        "currency",
        "interval",
        "intervalCount",
        "product",
        "description"
      ],
      "additionalProperties": false,
      "properties": {
        "id": {
          "description": "The identifier of a plan.",
          "type": "string"
        },
        "nickname": {
          "description": "The title of a plan.",
          "type": "string"
        },
        "amount": {
          "description": "The price of a plan. If a free plan then undefined.",
          "type": "number",
          "format": "float"
        },
        "currency": {
          "description": "The currency a plan is offered in.",
          "type": "string"
        },
        "interval": {
          "description": "The type of billing period used.",
          "type": "string",
          "enum": [
            "day",
            "week",
            "month",
            "year",
            "none"
          ]
        },
        "intervalCount": {
          "description": "Given the `interval` this is how frequently it will run. e.g. every 2 weeks.",
          "type": "integer",
          "format": "int32"
        },
        "trialPeriodDays": {
          "description": "How many days a trial period runs for a plan. Only valid if `hasTrialPeriod` is true.",
          "type": "integer",
          "format": "int32"
        },
        "product": {
          "description": "The product description.",
          "type": "string"
        },
        "description": {
          "description": "The textual description.",
          "type": "string"
        },
        "switchingText": {
          "description": "The text to switch for.",
          "type": "string"
        },
        "savingLabel": {
          "description": "The saving label.",
          "type": "string"
        }
      }
    },
    "ItvPlans": {
      "type": "object",
      "required": [
        "plans"
      ],
      "additionalProperties": false,
      "properties": {
        "plans": {
          "description": "The list of available plans.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ItvPlanListItem"
          }
        }
      }
    },
    "ItvProfileToken": {
      "x-emoji": "🔑",
      "type": "object",
      "required": [
        "profileToken"
      ],
      "additionalProperties": false,
      "properties": {
        "profileToken": {
          "description": "The ITV profile token.",
          "type": "string"
        }
      }
    },
    "ItvProfileTokenRequest": {
      "type": "object",
      "required": [
        "password"
      ],
      "additionalProperties": false,
      "properties": {
        "password": {
          "description": "The password.",
          "type": "string"
        }
      }
    },
    "ItvPurchase": {
      "x-emoji": "💰",
      "type": "object",
      "required": [
        "planId"
      ],
      "additionalProperties": false,
      "properties": {
        "planId": {
          "description": "The identifier of subscription plan.",
          "type": "string"
        },
        "subscriptionId": {
          "description": "The identifier of subscription in payment system.",
          "type": "string"
        },
        "customerId": {
          "description": "The identifier of user in payment system.",
          "type": "string"
        }
      }
    },
    "ItvPurchaseRequest": {
      "type": "object",
      "required": [
        "planId",
        "profileToken",
        "cardToken"
      ],
      "additionalProperties": false,
      "properties": {
        "planId": {
          "description": "The identifier of the plan to purchase.",
          "type": "string"
        },
        "profileToken": {
          "description": "The ITV profile token.",
          "type": "string"
        },
        "cardToken": {
          "description": "The credit card token.",
          "type": "string"
        },
        "voucher": {
          "description": "A coupon/voucher for a discount.",
          "type": "string"
        }
      }
    },
    "ItvPurchaseStrongRequest": {
      "type": "object",
      "required": [
        "planId",
        "profileToken"
      ],
      "additionalProperties": false,
      "properties": {
        "planId": {
          "description": "The identifier of the plan to purchase.",
          "type": "string"
        },
        "profileToken": {
          "description": "The ITV profile token.",
          "type": "string"
        },
        "paymentMethodId": {
          "description": "A paymentMethodId from Stripe.",
          "type": "string"
        },
        "voucher": {
          "description": "A coupon/voucher for a discount.",
          "type": "string"
        },
        "paymentMethodFromToken": {
          "description": "A paymentMethodFromToken.",
          "type": "string"
        }
      }
    },
    "ItvPurchaseStrongResponse": {
      "x-emoji": "💰",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "planId": {
          "description": "The identifier of subscription plan.",
          "type": "string"
        },
        "subscriptionId": {
          "description": "The identifier of subscription in payment system.",
          "type": "string"
        },
        "customerId": {
          "description": "The identifier of user in payment system.",
          "type": "string"
        },
        "intentId": {
          "description": "IntentId.",
          "type": "string"
        },
        "intentType": {
          "description": "intentType.",
          "type": "string"
        },
        "clientSecret": {
          "description": "clientSecret.",
          "type": "string"
        },
        "status": {
          "description": "Status.",
          "type": "string"
        }
      }
    },
    "ItvPurchaseWithOfferRequest": {
      "type": "object",
      "required": [
        "planId",
        "profileToken",
        "couponId"
      ],
      "additionalProperties": false,
      "properties": {
        "planId": {
          "description": "The identifier of the plan to purchase.",
          "type": "string"
        },
        "profileToken": {
          "description": "The ITV profile token.",
          "type": "string"
        },
        "paymentMethodId": {
          "description": "A paymentMethodId from Stripe.",
          "type": "string"
        },
        "couponId": {
          "description": "A coupon/voucher for a discount. Can be retrieved from GET itv/voucher/{platform} endpoint",
          "type": "string"
        },
        "paymentMethodFromToken": {
          "description": "A paymentMethodFromToken.",
          "type": "string"
        }
      }
    },
    "ItvPurchaseWithOfferResponse": {
      "x-emoji": "💰",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "subscriptionId": {
          "description": "The identifier of subscription in payment system.",
          "type": "string"
        },
        "customerId": {
          "description": "The identifier of user in payment system.",
          "type": "string"
        },
        "intentId": {
          "description": "IntentId.",
          "type": "string"
        },
        "intentType": {
          "description": "intentType.",
          "type": "string"
        },
        "clientSecret": {
          "description": "clientSecret.",
          "type": "string"
        },
        "status": {
          "description": "Status.",
          "type": "string"
        },
        "paymentMethodId": {
          "description": "Payment Method ID",
          "type": "string"
        }
      }
    },
    "ItvRecsConfig": {
      "x-emoji": "📚",
      "type": "object",
      "required": [
        "segment",
        "rec_id"
      ],
      "description": "Recommendation config.",
      "additionalProperties": false,
      "properties": {
        "segment": {
          "type": "string",
          "description": "The segment of the recommendation"
        },
        "rec_id": {
          "type": "string",
          "description": "recommendation ID"
        }
      }
    },
    "ItvRecsConfigList": {
      "x-emoji": "📚",
      "type": "object",
      "required": [
        "default",
        "mappings"
      ],
      "description": "A list of recommendation configs.",
      "additionalProperties": false,
      "properties": {
        "default": {
          "type": "string",
          "description": "The default recommendation id for fallback purpose"
        },
        "mappings": {
          "type": "array",
          "description": "A list of segmentation tags and recommendation IDs",
          "items": {
            "$ref": "#/definitions/ItvRecsConfig"
          }
        }
      }
    },
    "ItvRokuTransactionRequest": {
      "type": "object",
      "required": [
        "profileToken"
      ],
      "additionalProperties": false,
      "properties": {
        "profileToken": {
          "description": "The ITV profile token.",
          "type": "string"
        }
      }
    },
    "ItvSubscriptionFullPriceRenewal": {
      "type": "object",
      "required": [
        "fullPriceRenewal",
        "reason"
      ],
      "additionalProperties": false,
      "properties": {
        "fullPriceRenewal": {
          "description": "full price renewal state.",
          "type": "boolean"
        },
        "reason": {
          "description": "reason of full price renewal state.",
          "type": "string"
        }
      }
    },
    "ItvSubscriptionState": {
      "x-emoji": "💳",
      "type": "object",
      "required": [
        "failed_availability_checks",
        "effective_entitlements",
        "source",
        "purchased"
      ],
      "additionalProperties": false,
      "properties": {
        "failed_availability_checks": {
          "description": "The results of availability checks.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "effective_entitlements": {
          "description": "The array of entitlement objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ItvEntitlement"
          }
        },
        "source": {
          "description": "The payment provider (stripe/itunes)",
          "type": "string"
        },
        "purchased": {
          "description": "The array of entitlement names.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ItvSubscriptionStatusResponse": {
      "type": "object",
      "required": [
        "is_active"
      ],
      "additionalProperties": false,
      "properties": {
        "is_active": {
          "description": "Defines whether last payment intent was successful or not.",
          "type": "boolean"
        }
      }
    },
    "ItvUpdateIntentStrongRequest": {
      "type": "object",
      "required": [
        "profileToken"
      ],
      "additionalProperties": false,
      "properties": {
        "profileToken": {
          "description": "The ITV profile token.",
          "type": "string"
        },
        "paymentMethodId": {
          "description": "The paymentMethodId from Stripe.",
          "type": "string"
        },
        "paymentMethodFromToken": {
          "description": "A paymentMethodFromToken.",
          "type": "string"
        }
      }
    },
    "ItvUpdateIntentStrongResponse": {
      "x-emoji": "💰",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "intentId": {
          "description": "IntentId.",
          "type": "string"
        },
        "intentType": {
          "description": "IntentType.",
          "type": "string"
        },
        "clientSecret": {
          "description": "ClientSecret.",
          "type": "string"
        },
        "status": {
          "description": "Status.",
          "type": "string"
        }
      }
    },
    "ItvUpdatePaymentStrongRequest": {
      "type": "object",
      "required": [
        "profileToken"
      ],
      "additionalProperties": false,
      "properties": {
        "profileToken": {
          "description": "The ITV profile token.",
          "type": "string"
        },
        "paymentMethodId": {
          "description": "The paymentMethodId from Stripe.",
          "type": "string"
        },
        "paymentMethodFromToken": {
          "description": "A paymentMethodFromToken.",
          "type": "string"
        }
      }
    },
    "ItvUpdateProfileRequest": {
      "type": "object",
      "required": [
        "profileToken"
      ],
      "additionalProperties": false,
      "properties": {
        "profileToken": {
          "description": "The ITV profile token.",
          "type": "string"
        },
        "email": {
          "description": "The email address.",
          "type": "string"
        },
        "postcode": {
          "description": "The postal code.",
          "type": "string"
        },
        "dateOfBirth": {
          "description": "The date of birth.",
          "type": "string"
        },
        "lastName": {
          "description": "First name.",
          "type": "string"
        },
        "firstName": {
          "description": "Last name.",
          "type": "string"
        },
        "title": {
          "description": "The title.",
          "type": "string"
        }
      }
    },
    "ItvUpgradePlanRequest": {
      "type": "object",
      "required": [
        "planId"
      ],
      "additionalProperties": false,
      "properties": {
        "planId": {
          "description": "The identifier of the plan to purchase.",
          "type": "string"
        }
      }
    },
    "ItvVoucher": {
      "x-emoji": "💰",
      "type": "object",
      "required": [
        "id",
        "offerType",
        "display",
        "links"
      ],
      "additionalProperties": false,
      "properties": {
        "id": {
          "description": "The coupon/voucher.",
          "type": "string"
        },
        "offerType": {
          "description": "The voucher offer type.",
          "type": "string",
          "enum": [
            "stripe",
            "talon one"
          ]
        },
        "display": {
          "description": "The display information for voucher.",
          "$ref": "#/definitions/ItvVoucherDisplay"
        },
        "links": {
          "description": "The links pointing to voucher url.",
          "$ref": "#/definitions/ItvVoucherLinks"
        }
      }
    },
    "ItvVoucherDisplay": {
      "type": "object",
      "required": [
        "type"
      ],
      "additionalProperties": true,
      "properties": {
        "discountPrice": {
          "description": "Discount price.",
          "type": "string"
        },
        "shortDescription": {
          "description": "Short description.",
          "type": "string"
        },
        "longDescription": {
          "description": "Long description.",
          "type": "string"
        },
        "headlineLabel": {
          "description": "Headline label.",
          "type": "string"
        },
        "percentOff": {
          "description": "Percent off.",
          "type": "number",
          "format": "float"
        },
        "currency": {
          "description": "Currency.",
          "type": "string"
        },
        "duration": {
          "description": "Duration.",
          "type": "string"
        },
        "durationInMonths": {
          "description": "Duration in months.",
          "type": "number",
          "format": "integer"
        },
        "initialCost": {
          "description": "InitialCost.",
          "type": "number",
          "format": "float"
        },
        "savingLabel": {
          "description": "SavingLabel.",
          "type": "string"
        }
      }
    },
    "ItvVoucherLinks": {
      "type": "object",
      "required": [
        "self",
        "redeem"
      ],
      "additionalProperties": true,
      "properties": {
        "self": {
          "description": "Self link.",
          "$ref": "#/definitions/ItvVoucherLinksHref"
        },
        "redeem": {
          "description": "Redeem link.",
          "$ref": "#/definitions/ItvVoucherLinksHref"
        }
      }
    },
    "ItvVoucherLinksHref": {
      "type": "object",
      "required": [
        "href"
      ],
      "additionalProperties": true,
      "properties": {
        "href": {
          "description": "The voucher link.",
          "type": "string"
        }
      }
    },
    "ItvVoucherRequest": {
      "type": "object",
      "required": [
        "voucher"
      ],
      "additionalProperties": false,
      "properties": {
        "voucher": {
          "description": "The voucher.",
          "type": "string"
        }
      }
    },
    "Language": {
      "x-emoji": "🌎",
      "type": "object",
      "required": [
        "code",
        "label",
        "title"
      ],
      "additionalProperties": false,
      "properties": {
        "code": {
          "description": "The ISO language code of the language e.g. \"en-US\".\nSee https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\n",
          "type": "string"
        },
        "label": {
          "description": "Display label for the language.",
          "type": "string"
        },
        "title": {
          "description": "Display title for the language.",
          "type": "string"
        }
      }
    },
    "ListData": {
      "type": "object",
      "description": "Extra data to accompany ItemList content. The (single) key in the object is\nthe list name and the data changes depending on the list\n",
      "additionalProperties": false,
      "properties": {
        "ContinueWatching": {
          "$ref": "#/definitions/ContinueWatchingListData"
        }
      }
    },
    "MediaFile": {
      "x-emoji": "📀",
      "type": "object",
      "required": [
        "name",
        "deliveryType",
        "url",
        "drm",
        "format",
        "resolution",
        "width",
        "height",
        "language"
      ],
      "additionalProperties": false,
      "properties": {
        "name": {
          "description": "The name of the media file.",
          "type": "string"
        },
        "deliveryType": {
          "description": "The way in which the media file is delivered.",
          "type": "string",
          "enum": [
            "Stream",
            "Progressive",
            "Download"
          ]
        },
        "url": {
          "description": "The url to access the media file.",
          "type": "string",
          "format": "uri"
        },
        "drm": {
          "description": "The type of drm used to encrypt the media. 'None' if unencrypted.",
          "type": "string"
        },
        "format": {
          "description": "The format the media was encoded in.",
          "type": "string"
        },
        "resolution": {
          "description": "The resolution of the video media.",
          "type": "string",
          "enum": [
            "SD",
            "HD-720",
            "HD-1080",
            "HD-4K",
            "External",
            "Unknown"
          ]
        },
        "width": {
          "description": "The width of the video media.",
          "type": "integer",
          "format": "int32"
        },
        "height": {
          "description": "The height of the video media.",
          "type": "integer",
          "format": "int32"
        },
        "channels": {
          "description": "The number of audio channels.",
          "type": "integer",
          "format": "int32"
        },
        "language": {
          "description": "The language code for the media, e.g. 'en'.",
          "type": "string"
        }
      }
    },
    "NavContent": {
      "type": "object",
      "properties": {
        "title": {
          "description": "The title of the embedded navigation content.",
          "type": "string"
        },
        "list": {
          "description": "An embedded list.",
          "$ref": "#/definitions/ItemList"
        },
        "imageType": {
          "description": "The image type to target when rendering items of the list.\n\ne.g wallpaper, poster, hero3x1, logo.\n",
          "type": "string"
        }
      }
    },
    "NavEntry": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "depth"
      ],
      "properties": {
        "depth": {
          "description": "The depth of the NavEntry (top level is 0)",
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "label": {
          "description": "The text label for this nav entry.",
          "type": "string"
        },
        "icon": {
          "description": "The icon for this nav entry.",
          "type": "string"
        },
        "path": {
          "description": "The path this nav entry links to.\nMay be undefined if the nav entry is not clickable e.g. a nav heading.\nIf the value begins with `http` then it's an external url.\n",
          "type": "string"
        },
        "content": {
          "description": "Embedded content to display in a navigation menu.",
          "$ref": "#/definitions/NavContent"
        },
        "children": {
          "description": "Child nav entries.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NavEntry"
          }
        },
        "featured": {
          "description": "True if this is a featured menu item.\n\nFeatured menu items may have a more prominent presentation than others in the navigation.\n",
          "type": "boolean"
        },
        "customFields": {
          "description": "A map of custom fields defined by a curator for a nav entry.",
          "type": "object",
          "additionalProperties": true
        }
      }
    },
    "Navigation": {
      "type": "object",
      "required": [
        "header"
      ],
      "additionalProperties": false,
      "properties": {
        "header": {
          "description": "The header navigation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NavEntry"
          }
        },
        "mobile": {
          "description": "The mobile navigation.",
          "$ref": "#/definitions/NavEntry"
        },
        "footer": {
          "description": "The footer navigation.",
          "$ref": "#/definitions/NavEntry"
        },
        "account": {
          "description": "The account navigation.",
          "$ref": "#/definitions/NavEntry"
        },
        "copyright": {
          "description": "Copyright information.",
          "type": "string"
        },
        "customFields": {
          "description": "A map of custom fields defined by a curator for navigation.",
          "type": "object",
          "additionalProperties": true
        }
      }
    },
    "NextPlaybackItem": {
      "type": "object",
      "required": [
        "sourceItemId"
      ],
      "additionalProperties": false,
      "properties": {
        "sourceItemId": {
          "description": "The id of the item used to determine the next item to play.",
          "type": "string"
        },
        "firstWatchedDate": {
          "description": "Time when the item corresponding to the itemId passed in by the client was\nfirst watched by the user. Will be `undefined` if the user has never\nwatched the item.\n\nIt can be used to identify the scenario where the user has never watched a\nshow and we are suggesting they watch the first episode (i.e. it is\nmissing in this scenario)\n\n**This will only be populated when a `showId` is passed in**\n",
          "type": "string",
          "format": "date-time"
        },
        "lastWatchedDate": {
          "description": "Time when the item corresponding to the itemId passed in by the client was\nlast watched by the user. Will be `undefined` if the user has never\nwatched the item.\n\nIt can be used to identify the scenario where the user has never watched a\nshow and we are suggesting they watch the first episode (i.e. it is\nmissing in this scenario)\n\n**This will only be populated when a `showId` is passed in**\n",
          "type": "string",
          "format": "date-time"
        },
        "suggestionType": {
          "description": "Field indicating the type or reason behind the suggestion.\n\nId Type   | Show Watched Status| Value            | Description\n----------|--------------------|------------------|---------------------------------\nshowId    | Unwatched          | StartWatching    |\nshowId    | Completely watched | RestartWatching  |\nshowId    | Partly watched     | ContinueWatching | Suggested episode partly watched\nshowId    | Partly watched     | Sequential       | Suggested episode unwatched\nepisodeId | Any                | Sequential       | Next episode in show\n",
          "type": "string",
          "enum": [
            "StartWatching",
            "ContinueWatching",
            "RestartWatching",
            "Sequential",
            "None"
          ]
        },
        "next": {
          "description": "The details of the next item to play.\n\nIf `undefined` then no item was found.\n",
          "$ref": "#/definitions/ItemDetail"
        }
      }
    },
    "Offer": {
      "allOf": [
        {
          "$ref": "#/definitions/OfferRights"
        },
        {
          "x-emoji": "💰",
          "type": "object",
          "required": [
            "price",
            "availability"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "price": {
              "type": "number",
              "format": "float"
            },
            "startDate": {
              "type": "string",
              "format": "date-time"
            },
            "endDate": {
              "type": "string",
              "format": "date-time"
            },
            "availability": {
              "type": "string",
              "enum": [
                "Available",
                "ComingSoon"
              ]
            },
            "subscriptionCode": {
              "description": "The code of the subscription this offer is offered under, if any.",
              "type": "string"
            },
            "customFields": {
              "description": "A map of custom fields defined by a curator for an offer.",
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      ]
    },
    "OfferRights": {
      "x-emoji": "🎟",
      "type": "object",
      "description": "The base type for both Offer and Entitlement.",
      "required": [
        "deliveryType",
        "scopes",
        "resolution",
        "ownership"
      ],
      "properties": {
        "deliveryType": {
          "type": "string",
          "enum": [
            "Stream",
            "Download",
            "StreamOrDownload",
            "ProgressiveDownload",
            "None"
          ]
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resolution": {
          "type": "string",
          "enum": [
            "SD",
            "HD-720",
            "HD-1080",
            "HD-4K",
            "External",
            "Unknown"
          ]
        },
        "ownership": {
          "type": "string",
          "enum": [
            "Subscription",
            "Free",
            "Rent",
            "Own",
            "None"
          ]
        },
        "maxPlays": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of allowed plays."
        },
        "maxDownloads": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of allowed downloads."
        },
        "rentalPeriod": {
          "type": "integer",
          "format": "int32",
          "description": "The length of time in minutes which the rental will last once purchased."
        },
        "playPeriod": {
          "type": "integer",
          "format": "int32",
          "description": "The length of time in minutes which the rental will last once played for the first time."
        },
        "exclusionRules": {
          "type": "array",
          "description": "Any specific playback exclusion rules.",
          "items": {
            "$ref": "#/definitions/ExclusionRule"
          }
        }
      }
    },
    "Page": {
      "allOf": [
        {
          "$ref": "#/definitions/PageSummary"
        },
        {
          "type": "object",
          "required": [
            "entries"
          ],
          "properties": {
            "metadata": {
              "$ref": "#/definitions/PageMetadata"
            },
            "entries": {
              "description": "Entries of a page",
              "type": "array",
              "items": {
                "$ref": "#/definitions/PageEntry"
              }
            },
            "customFields": {
              "description": "A map of custom fields defined by a curator for a page.",
              "type": "object",
              "additionalProperties": true
            },
            "item": {
              "description": "When the page represents the detail of an item this property will contain the item detail.\n\nFor clients consuming an item detail page, any page row entry of type `ItemDetailEntry`\nshould look to obtain its data from the contents of this property.\n\n*Note that you have to be using feature flag `idp` to enable this\non item detail pages. See `feature-flags.md` for further details.*\n",
              "$ref": "#/definitions/ItemDetail"
            },
            "list": {
              "description": "When the page represents the detail of a List this property will contain the list in question.\n\nFor clients consuming a list detail page, any page row entry of type `ListDetailEntry`\nshould look to obtain its data from the contents of this property.\n\n*Note that you have to be using feature flag `ldp` to enable this\non list detail pages. See `feature-flags.md` for further details.*\n",
              "$ref": "#/definitions/ItemList"
            },
            "themes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Theme"
              }
            }
          }
        }
      ]
    },
    "PageEntry": {
      "x-emoji": "📑",
      "type": "object",
      "required": [
        "id",
        "type",
        "title",
        "template"
      ],
      "description": "Represents an entry of a Page.\nDefines what specific piece of content should be presented e.g. an Item or ItemList.\nAlso defines what visual template should be used to render that content.\n",
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier for a page entry."
        },
        "type": {
          "type": "string",
          "description": "The type of PageEntry. Used to help identify what type of content will be presented.",
          "enum": [
            "ItemEntry",
            "ItemDetailEntry",
            "ListEntry",
            "ListDetailEntry",
            "UserEntry",
            "TextEntry",
            "ImageEntry",
            "CustomEntry",
            "PeopleEntry"
          ],
          "x-enumEmoji": {
            "ItemEntry": "📘",
            "ItemDetailEntry": "📘",
            "ListEntry": "📚",
            "ListDetailEntry": "📚",
            "UserEntry": "👤",
            "TextEntry": "📝",
            "ImageEntry": "🌅",
            "CustomEntry": "⚙️",
            "PeopleEntry": "👱"
          }
        },
        "title": {
          "description": "The name of the Page Entry.",
          "type": "string"
        },
        "template": {
          "description": "Template type used to present the content of the PageEntry.",
          "type": "string"
        },
        "item": {
          "description": "If 'type' is 'ItemEntry' then this is the item to be represented.",
          "$ref": "#/definitions/ItemSummary"
        },
        "list": {
          "description": "If 'type' is 'ListEntry' or 'UserEntry' then this is the list to be represented.",
          "$ref": "#/definitions/ItemList"
        },
        "text": {
          "description": "If 'type' is 'TextEntry' then this is the text to be represented.",
          "type": "string"
        },
        "people": {
          "description": "If 'type' is 'PeopleEntry' then this is the array of people to present.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Person"
          }
        },
        "customFields": {
          "description": "A map of custom fields defined by a curator for a page entry.",
          "type": "object",
          "additionalProperties": true
        },
        "images": {
          "description": "The images for the page entry if any.\n\nFor example the images of an `ImageEntry`.\n",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "uri"
          }
        }
      }
    },
    "PageMetadata": {
      "type": "object",
      "description": "Metadata associated with a page. Primarily intended for SEO usage.",
      "additionalProperties": false,
      "properties": {
        "description": {
          "type": "string"
        },
        "keywords": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "segments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PageSummary": {
      "x-emoji": "📃",
      "type": "object",
      "required": [
        "id",
        "path",
        "title",
        "template",
        "isStatic",
        "isSystemPage"
      ],
      "properties": {
        "id": {
          "description": "Unique identifier for the page.",
          "type": "string"
        },
        "title": {
          "description": "Title of the page.",
          "type": "string"
        },
        "path": {
          "description": "Unique path for the page.",
          "type": "string"
        },
        "key": {
          "description": "Key used to lookup a known page.",
          "type": "string"
        },
        "template": {
          "description": "Identifier for of the page template to render this page.",
          "type": "string"
        },
        "isStatic": {
          "description": "True if this page is static and doesn't have any dynamic content to load.\n\nStatic pages don't need to go back to the page endpoint to load page content\ninstead the page summary loaded with the sitemap should be enough to determine\nthe page template type and render based on this.\n",
          "type": "boolean"
        },
        "isSystemPage": {
          "x-deprecated": "Replaced with isStatic",
          "description": "True if this page is a system page type.\n\n**DEPRECATED** This property doesn't have any real use in client applications\nanymore so shouldn't be used. It especially shouldn't be used to determine if\na page is static or not. Use the `isStatic` property instead.\n",
          "type": "boolean"
        }
      }
    },
    "Pagination": {
      "type": "object",
      "required": [
        "total",
        "page"
      ],
      "additionalProperties": false,
      "properties": {
        "next": {
          "description": "Path to load next page of data, or null if not available",
          "type": "string"
        },
        "previous": {
          "description": "Path to load previous page of data, or null if not available.",
          "type": "string"
        },
        "page": {
          "description": "The current page number.\n\nA value of 0 indicates that the fist page has not yet been loaded. This is\nuseful when wanting to return the paging metadata to indicate how to\nload in the first page.\n",
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "size": {
          "description": "The current page size.\n\nA value of -1 indicates that the size has not yet been determined. This may\narise when embedding secure list pagination info in a page which must be cached\nby a CDN. For example a Bookmarks list.\n",
          "type": "integer",
          "format": "int32",
          "minimum": -1
        },
        "total": {
          "description": "The total number of pages available given the current page size.\n\nA value of -1 indicates that the total has not yet been determined. This may\narise when embedding secure list pagination info in a page which must be cached\nby a CDN. For example a Bookmarks list.\n",
          "type": "integer",
          "format": "int32",
          "minimum": -1
        },
        "authorization": {
          "description": "The authorization requirements to load a page of items.\n\nThis will only be present on lists which are protected by some form\nof authorization token e.g. Bookmarks, Watched, Entitlements.\n",
          "$ref": "#/definitions/PaginationAuth"
        },
        "options": {
          "description": "Any active list sort and filter options.\n\nIf an option has a default value then it won't be defined.\n",
          "$ref": "#/definitions/PaginationOptions"
        }
      }
    },
    "PaginationAuth": {
      "type": "object",
      "required": [
        "type",
        "scope"
      ],
      "properties": {
        "type": {
          "description": "The token type required to load the list.",
          "type": "string",
          "enum": [
            "UserAccount",
            "UserProfile"
          ]
        },
        "scope": {
          "description": "The token scope required.",
          "type": "string",
          "enum": [
            "Catalog",
            "Commerce",
            "Settings"
          ]
        }
      }
    },
    "PaginationOptions": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "pageSize": {
          "description": "The number of items to return in a list page.",
          "type": "integer",
          "format": "int32"
        },
        "order": {
          "description": "The applied sort order if any.",
          "type": "string",
          "enum": [
            "asc",
            "desc"
          ]
        },
        "orderBy": {
          "description": "The applied sort ordering property if any.",
          "type": "string",
          "enum": [
            "a-z",
            "release-year",
            "date-added"
          ]
        },
        "maxRating": {
          "description": "The maximum rating (inclusive) of items returned, e.g. 'AUOFLC-PG'.",
          "type": "string"
        },
        "itemType": {
          "description": "Specific item type filter.",
          "type": "string",
          "enum": [
            "movie",
            "show",
            "season",
            "episode",
            "program",
            "link",
            "trailer",
            "channel",
            "customAsset"
          ],
          "x-enumEmoji": {
            "movie": "🎬",
            "show": "📺",
            "season": "📺",
            "episode": "📺",
            "program": "🎟",
            "link": "🔗",
            "trailer": "🖥",
            "channel": "📺"
          }
        },
        "completed": {
          "description": "Items filtered by whether they've been fully watched or not.\n\nOnly available on the `/account/profile/watched/list` endpoint currently.\n",
          "type": "boolean"
        }
      }
    },
    "PasswordResetEmailRequest": {
      "type": "object",
      "required": [
        "email"
      ],
      "additionalProperties": false,
      "properties": {
        "email": {
          "description": "The email address of the primary account profile to reset the password for.",
          "type": "string"
        }
      }
    },
    "PasswordResetRequest": {
      "type": "object",
      "required": [
        "resetToken",
        "password"
      ],
      "additionalProperties": false,
      "properties": {
        "resetToken": {
          "description": "The ITV reset token.",
          "type": "string"
        },
        "password": {
          "description": "The new password for the account.",
          "type": "string"
        }
      }
    },
    "PaymentMethod": {
      "x-emoji": "💳",
      "type": "object",
      "required": [
        "id",
        "description",
        "type"
      ],
      "additionalProperties": false,
      "properties": {
        "id": {
          "description": "The unique identifier of a payment method.",
          "type": "string"
        },
        "description": {
          "description": "A short description of a payment method.\n\nIf the payment method is of type `Wallet` this will be \"My Wallet\"\n\nFor `Card` type payment methods the format of this description may differ\ndepending on the payment gateway in use. In the case of Stripe, this will\nbe in the format \"Visa (**** 4242, exp 08/19)\"\n",
          "type": "string"
        },
        "type": {
          "description": "The type of payment method.",
          "type": "string",
          "enum": [
            "Card",
            "Wallet"
          ]
        },
        "brand": {
          "description": "The brand of the card if the payment method is a card.",
          "type": "string",
          "enum": [
            "Visa",
            "MasterCard",
            "AmericanExpress",
            "Other"
          ]
        },
        "balance": {
          "description": "The balance of the wallet if the payment method is a wallet.",
          "type": "number",
          "format": "float"
        },
        "currency": {
          "description": "The currency code of the wallet if the payment method is a wallet.",
          "type": "string"
        },
        "expiryMonth": {
          "description": "The expiry month of the card if the payment method is a card.",
          "type": "number",
          "format": "int32"
        },
        "expiryYear": {
          "description": "The expiry year of the card if the payment method is a card.",
          "type": "number",
          "format": "int32"
        },
        "lastDigits": {
          "description": "The last digits of the card if the payment method is a card.\nDepending on the payment gateway in use this value may be undefined.\n",
          "type": "number",
          "format": "int32"
        }
      }
    },
    "Person": {
      "x-emoji": "👱",
      "type": "object",
      "required": [
        "name",
        "path"
      ],
      "properties": {
        "name": {
          "description": "The name of the person.",
          "type": "string"
        },
        "path": {
          "description": "The path to the person",
          "type": "string"
        }
      }
    },
    "Plan": {
      "x-emoji": "💳",
      "type": "object",
      "required": [
        "id",
        "title",
        "tagline",
        "type",
        "isFeatured",
        "isActive",
        "isPrivate",
        "revenueType",
        "subscriptionCode",
        "alias",
        "benefits",
        "billingPeriodType",
        "billingPeriodFrequency",
        "hasTrialPeriod",
        "trialPeriodDays",
        "termsAndConditions",
        "currency"
      ],
      "additionalProperties": false,
      "properties": {
        "id": {
          "description": "The identifier of a plan.",
          "type": "string"
        },
        "title": {
          "description": "The title of a plan.",
          "type": "string"
        },
        "tagline": {
          "description": "The short tagline for a plan.",
          "type": "string"
        },
        "type": {
          "description": "The type of plan.",
          "type": "string",
          "enum": [
            "Free",
            "Subscription"
          ]
        },
        "isFeatured": {
          "description": "True if a plan should be highlighted as featured, false if not.",
          "type": "boolean"
        },
        "isActive": {
          "description": "True if a plan is active, false if its retired.",
          "type": "boolean"
        },
        "isPrivate": {
          "description": "True if a plan should not be presented in the primary plan options, false if not.",
          "type": "boolean"
        },
        "revenueType": {
          "description": "The revenue type a plan targets.",
          "type": "string",
          "enum": [
            "TVOD",
            "SVOD"
          ]
        },
        "subscriptionCode": {
          "description": "The subscription code a plan targets.",
          "type": "string"
        },
        "alias": {
          "description": "An alias for a plan.",
          "type": "string"
        },
        "benefits": {
          "description": "The list of benefits to display for a plan.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "billingPeriodType": {
          "description": "The type of billing period used.",
          "type": "string",
          "enum": [
            "day",
            "week",
            "month",
            "year",
            "none"
          ]
        },
        "billingPeriodFrequency": {
          "description": "Given the `billingPeriodType` this is how frequently it will run. e.g. every 2 weeks.",
          "type": "integer",
          "format": "int32"
        },
        "hasTrialPeriod": {
          "description": "True if a plan has a trial period, false if not.",
          "type": "boolean"
        },
        "trialPeriodDays": {
          "description": "How many days a trial period runs for a plan. Only valid if `hasTrialPeriod` is true.",
          "type": "integer",
          "format": "int32"
        },
        "termsAndConditions": {
          "description": "The terms and conditions for a plan.",
          "type": "string"
        },
        "price": {
          "description": "The price of a plan. If a free plan then undefined.",
          "type": "number",
          "format": "float"
        },
        "currency": {
          "description": "The currency a plan is offered in.",
          "type": "string"
        },
        "customFields": {
          "description": "A map of custom fields defined by a curator for a plan.",
          "type": "object",
          "additionalProperties": true
        }
      }
    },
    "PlanPurchase": {
      "x-emoji": "💰",
      "type": "object",
      "required": [
        "title",
        "type"
      ],
      "additionalProperties": false,
      "properties": {
        "id": {
          "description": "The identifier of the purchased plan.",
          "type": "string"
        },
        "price": {
          "description": "The price of the purchased plan.",
          "type": "number",
          "format": "float"
        },
        "subscriptionId": {
          "description": "The identifier of the subscription membership to the plan.",
          "type": "string"
        },
        "title": {
          "description": "The title of the purchased plan.",
          "type": "string"
        },
        "type": {
          "description": "The type of plan purchased.",
          "type": "string",
          "enum": [
            "Free",
            "Subscription"
          ]
        }
      }
    },
    "ProfileCreationRequest": {
      "type": "object",
      "required": [
        "name"
      ],
      "additionalProperties": false,
      "properties": {
        "name": {
          "description": "The unique name of the profile.",
          "type": "string",
          "minLength": 1
        },
        "pinEnabled": {
          "description": "Whether an account pin is required to enter the profile.\n\nIf no account pin is defined this has no impact.\n",
          "type": "boolean",
          "default": false
        },
        "purchaseEnabled": {
          "description": "Whether the profile can make purchases with the account payment options.",
          "type": "boolean",
          "default": true
        },
        "segments": {
          "description": "The segments a profile should be placed under",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "languageCode": {
          "description": "The code of the preferred language for the profile.\nMust be a valid ISO language code e.g. \"en-US\" and must match the code of\none of the languages specified in the app config.\nSee https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\n",
          "type": "string"
        }
      }
    },
    "ProfileDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/ProfileSummary"
        },
        {
          "type": "object",
          "required": [
            "watched",
            "rated",
            "bookmarked"
          ],
          "properties": {
            "watched": {
              "description": "A map of watched itemIds => last watched position",
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/Watched"
              }
            },
            "rated": {
              "description": "A map of rated itemIds => rating out of 10",
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int32"
              }
            },
            "bookmarked": {
              "description": "A map of bookmarked itemIds => created date",
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      ]
    },
    "ProfileSummary": {
      "x-emoji": "👥",
      "type": "object",
      "required": [
        "id",
        "name",
        "isActive",
        "pinEnabled",
        "purchaseEnabled",
        "marketingEnabled",
        "segments"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the profile."
        },
        "name": {
          "type": "string",
          "description": "The unique name of the profile."
        },
        "pinEnabled": {
          "type": "boolean",
          "description": "Whether a pin is required to enter the profile."
        },
        "purchaseEnabled": {
          "type": "boolean",
          "description": "Whether the profile can make purchases with the account payment options."
        },
        "color": {
          "type": "string",
          "description": "Hex color value assigned to the profile."
        },
        "segments": {
          "description": "The segments a profile has been placed under",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isActive": {
          "x-deprecated": "Inactive profiles are no longer returned",
          "type": "boolean",
          "description": "Whether the profile is active or not.\n\n**DEPRECATED** - Always true. Inactive profiles are no longer returned.\n"
        },
        "marketingEnabled": {
          "x-deprecated": "Has moved to Account.marketingEnabled",
          "type": "boolean",
          "description": "Whether the profile has opted in or out of marketing material.\n\n**DEPRECATED** - Marketing material is no longer tied to profiles, only account. See `Account.marketingEnabled`.\n"
        },
        "maxRatingContentFilter": {
          "x-deprecated": "Replaced with segmentation tags",
          "description": "The maximum rating (inclusive) of content to return in feeds.\n\n**DEPRECATED** - It's no longer recommended filtering content globally as apps can end up\nwith pages without content, even the homepage. Instead using features like segmentation\ntags to target demographics like kids means content curation can be more thought out.\n",
          "$ref": "#/definitions/ClassificationSummary"
        },
        "minRatingPlaybackGuard": {
          "x-deprecated": "Has moved to Account",
          "description": "The minumum rating (inclusive) of content where an account pin should be presented before entring playback.\n\n**DEPRECATED** - The playback guard is now defined at the account level, where an account\npin also exists. This is then applied across all profiles.\n",
          "$ref": "#/definitions/ClassificationSummary"
        },
        "languageCode": {
          "description": "The code of the preferred language for the profile.\nMust be a valid ISO language code e.g. \"en-US\" and must match the code of\none of the languages specified in the app config.\nSee https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\n",
          "type": "string"
        },
        "heroWithAudio": {
          "type": "boolean",
          "description": "Gets the Hero row clip auto playback audio enabled"
        },
        "heroAutoplay": {
          "type": "boolean",
          "description": "Gets the Hero row clip auto playback enabled"
        }
      }
    },
    "ProfileTokenRequest": {
      "type": "object",
      "required": [
        "profileId",
        "scopes"
      ],
      "additionalProperties": false,
      "properties": {
        "profileId": {
          "description": "The id of the profile the token should grant access rights to.",
          "type": "string"
        },
        "pin": {
          "description": "The pin associated with this profile, if any.",
          "type": "string"
        },
        "scopes": {
          "description": "The scope(s) of the token(s) required.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Catalog",
              "Commerce",
              "Settings"
            ]
          }
        },
        "cookieType": {
          "description": "If you specify a cookie type then a content filter cookie will be returned\nalong with the token(s). This is only intended for web based clients which\nneed to pass the cookies to a server to render a page based on the user's\ncontent filters e.g subscription code.\n\nIf type `Session` the cookie will be session based.\nIf type `Persistent` the cookie will have a medium term lifespan.\nIf undefined no cookies will be set.\n",
          "type": "string",
          "enum": [
            "Session",
            "Persistent"
          ]
        }
      }
    },
    "ProfileUpdateRequest": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "description": "The unique name of the profile.",
          "type": "string",
          "minLength": 1
        },
        "pinEnabled": {
          "description": "Whether an account pin is required to enter the profile.\n\nIf no account pin is defined this has no impact.\n",
          "type": "boolean"
        },
        "purchaseEnabled": {
          "description": "Whether the profile can make purchases with the account payment options.",
          "type": "boolean"
        },
        "heroWithAudio": {
          "description": "Sets the Hero row clip auto playback audio enabled",
          "type": "boolean"
        },
        "heroAutoplay": {
          "description": "Sets the Hero row clip auto playback enabled",
          "type": "boolean"
        },
        "segments": {
          "description": "The segments a profile should be placed under",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "languageCode": {
          "description": "The code of the preferred language for the profile.\nMust be a valid ISO language code e.g. \"en-US\" and must match the code of\none of the languages specified in the app config.\nSee https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\n",
          "type": "string"
        }
      }
    },
    "Purchase": {
      "x-emoji": "💰",
      "type": "object",
      "required": [
        "creationDate",
        "currency",
        "id",
        "total"
      ],
      "additionalProperties": false,
      "properties": {
        "id": {
          "description": "The identifier of the purchase.",
          "type": "string"
        },
        "authorizationDate": {
          "description": "The date the purchase was authorized.",
          "type": "string",
          "format": "date-time"
        },
        "creationDate": {
          "description": "The date the purchase was created.",
          "type": "string",
          "format": "date-time"
        },
        "currency": {
          "description": "The currency code used to make the purchase.",
          "type": "string"
        },
        "item": {
          "description": "The purchased item. Not applicable if the purchase was made for a plan.",
          "$ref": "#/definitions/ItemPurchase"
        },
        "paymentMethodId": {
          "description": "The identifier of the payment method used to make the purchase.",
          "type": "string"
        },
        "plan": {
          "description": "The purchased plan. Not applicable if the purchase was made for items.",
          "$ref": "#/definitions/PlanPurchase"
        },
        "total": {
          "description": "The total cost of the purchase.",
          "type": "number",
          "format": "float"
        }
      }
    },
    "PurchaseRequest": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "itemId": {
          "description": "The identifier of the item to purchase.\nBoth `itemId` and `offerId` are required for item purchases.\n",
          "type": "string"
        },
        "offerId": {
          "description": "The identifier of the item offer to purchase.\nBoth `itemId` and `offerId` are required for item purchases.\n",
          "type": "string"
        },
        "planId": {
          "description": "The identifier of the plan to purchase.",
          "type": "string"
        },
        "paymentMethodId": {
          "description": "The identifier of the payment method to use.\nIf omitted, or if purchasing a plan, the default payment method will be used.\n",
          "type": "string"
        }
      }
    },
    "RegistrationRequest": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "additionalProperties": false,
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "pin": {
          "description": "The primary account pin.",
          "type": "string"
        },
        "marketing": {
          "description": "Whether to receive marketing material or not. Default to true.",
          "type": "boolean",
          "default": true
        },
        "segments": {
          "description": "The segments to apply to the primary profile.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "languageCode": {
          "description": "The code of the preferred language for the primary profile.\nMust be a valid ISO language code e.g. \"en-US\" and must match the code of\none of the languages specified in the app config.\nSee https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\n",
          "type": "string"
        }
      }
    },
    "RokuPlanListItem": {
      "type": "object",
      "required": [
        "productCode",
        "nickname",
        "product",
        "currency",
        "amount",
        "interval",
        "intervalCount",
        "trialPeriodDays",
        "description",
        "savingLabel"
      ],
      "additionalProperties": false,
      "properties": {
        "productCode": {
          "description": "The identifier of a plan.",
          "type": "string"
        },
        "nickname": {
          "description": "The title of a plan.",
          "type": "string"
        },
        "product": {
          "description": "The product of a plan.",
          "type": "string"
        },
        "currency": {
          "description": "The currency a plan is offered in.",
          "type": "string"
        },
        "amount": {
          "description": "The price of a plan. If a free plan then undefined.",
          "type": "number",
          "format": "float"
        },
        "interval": {
          "description": "The type of billing period used.",
          "type": "string",
          "enum": [
            "day",
            "week",
            "month",
            "year",
            "none"
          ]
        },
        "intervalCount": {
          "description": "Given the `interval` this is how frequently it will run. e.g. every 2 weeks.",
          "type": "integer",
          "format": "int32"
        },
        "trialPeriodDays": {
          "description": "How many days a trial period runs for a plan. Only valid if `hasTrialPeriod` is true.",
          "type": "integer",
          "format": "int32"
        },
        "description": {
          "description": "The textual description.",
          "type": "string"
        },
        "savingLabel": {
          "description": "NA.",
          "type": "string"
        }
      }
    },
    "RokuPlans": {
      "type": "object",
      "required": [
        "plans",
        "termsAndConditions"
      ],
      "additionalProperties": false,
      "properties": {
        "plans": {
          "description": "The list of available plans.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RokuPlanListItem"
          }
        },
        "termsAndConditions": {
          "description": "Details of terms and conditions of the plan.",
          "type": "string"
        }
      }
    },
    "SamsungPreview": {
      "type": "object",
      "required": [
        "sections"
      ],
      "additionalProperties": false,
      "properties": {
        "expires": {
          "description": "For public preview only\nIf specified, the time at which the preview content is updated.\nThe time is at most 1 week into the future. By default, the preview\ncontent is updated every 10 minutes, whenever the TV is switched on,\nor the JSON file changes.\n",
          "type": "integer",
          "format": "int64"
        },
        "expires_only": {
          "description": "For public preview only\nIf this value is \"true\", the preview content is updated only at\nthe time specified by the \"expires\" parameter.\n",
          "type": "boolean",
          "default": false
        },
        "sections": {
          "description": "Preview sections",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SamsungPreviewSection"
          }
        }
      }
    },
    "SamsungPreviewSection": {
      "type": "object",
      "required": [
        "tiles"
      ],
      "additionalProperties": false,
      "properties": {
        "title": {
          "description": "Section title",
          "type": "string"
        },
        "position": {
          "description": "Section position. If specified, sections are shown in ascending position order.",
          "type": "integer",
          "format": "int32"
        },
        "tiles": {
          "description": "Tiles within the section",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SamsungPreviewSectionTile"
          }
        }
      }
    },
    "SamsungPreviewSectionTile": {
      "type": "object",
      "required": [
        "image_url",
        "image_ratio",
        "action_data",
        "is_playable"
      ],
      "additionalProperties": false,
      "properties": {
        "title": {
          "description": "Tile title",
          "type": "string"
        },
        "subtitle": {
          "description": "Tile subtitle",
          "type": "string"
        },
        "image_url": {
          "description": "Thumbnail image URL",
          "type": "string",
          "format": "uri"
        },
        "image_ratio": {
          "description": "Thumbnail image aspect ratio\n  \"16:9\"\n  \"4:3\"\n  \"1:1\" (default)\n  \"2:3\"\n  The thumbnail height is fixed at 250 px on presentation.\n",
          "type": "string"
        },
        "action_data": {
          "description": "Data to send to the application when the tile is clicked",
          "type": "string"
        },
        "is_playable": {
          "description": "If \"true\", a \"Play\" icon is shown over the thumbnail image",
          "type": "boolean"
        },
        "display_from": {
          "description": "Time to begin showing the tile",
          "type": "string",
          "format": "date-time"
        },
        "display_until": {
          "description": "Time to stop showing the tile",
          "type": "string",
          "format": "date-time"
        },
        "position": {
          "description": "Section position. If specified, sections are shown in ascending position order",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "SearchResults": {
      "x-emoji": "🔍",
      "type": "object",
      "required": [
        "term",
        "total"
      ],
      "additionalProperties": false,
      "properties": {
        "term": {
          "description": "The search term.",
          "type": "string"
        },
        "total": {
          "description": "The total number of results.",
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "items": {
          "description": "The list of all items relevant to the search term.\n\nIf this is present then the `movies` and `tv` lists won't be.\n",
          "$ref": "#/definitions/ItemList"
        },
        "movies": {
          "description": "The list of movie items relevant to the search term.\n\nIf this is present then the `items` list won't be.\n",
          "$ref": "#/definitions/ItemList"
        },
        "tv": {
          "description": "The list of tv items (shows + programs) relevant to the search term.\n\nIf this is present then the `items` list won't be.\n",
          "$ref": "#/definitions/ItemList"
        },
        "other": {
          "description": "The list of other items (`customAsset`s) relevant to the search term.\n\nIf this is present then the `items` list won't be.\n",
          "$ref": "#/definitions/ItemList"
        },
        "people": {
          "description": "The list of people relevant to the search term.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Person"
          }
        }
      }
    },
    "ServiceError": {
      "x-emoji": "🔴",
      "type": "object",
      "required": [
        "message"
      ],
      "additionalProperties": false,
      "properties": {
        "message": {
          "type": "string",
          "description": "A description of the error."
        },
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "An optional code classifying the error. Should be taken in the context of the http status code."
        }
      }
    },
    "SingleSignOnRequest": {
      "type": "object",
      "required": [
        "provider",
        "token"
      ],
      "additionalProperties": false,
      "properties": {
        "provider": {
          "description": "The third party single-sign-on provider.",
          "type": "string",
          "enum": [
            "Facebook"
          ]
        },
        "token": {
          "description": "A token from the third party single-sign-on provider e.g. an identity token from Facebook.",
          "type": "string"
        },
        "scopes": {
          "description": "The scope(s) of the tokens required.\nFor each scope listed an Account and Profile token of that scope will be returned.\n",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Catalog",
              "Commerce",
              "Settings",
              "Playback"
            ]
          }
        },
        "cookieType": {
          "description": "If you specify a cookie type then a content filter cookie will be returned\nalong with the token(s). This is only intended for web based clients which\nneed to pass the cookies to a server to render a page based on the user's\ncontent filters e.g subscription code.\n\nIf type `Session` the cookie will be session based.\nIf type `Persistent` the cookie will have a medium term lifespan.\nIf undefined no cookies will be set.\n",
          "type": "string",
          "enum": [
            "Session",
            "Persistent"
          ]
        },
        "linkAccounts": {
          "description": "When a user attempts to sign in using single-sign-on, we may find an account created\npreviously through the manual sign up flow with the same email. If this is the\ncase then an option to link the two accounts can be made available.\n\nIf this flag is set to true then accounts will be linked automatically.\n\nIf this flag is not set or set to false and an existing account is found \nthen an http 401 with subcode `6001` will be returned. Client apps can then present the\noption to link the accounts. If the user decides to accept, then the same call\ncan be repeated with this flag set to true.\n",
          "type": "boolean"
        }
      }
    },
    "Subscription": {
      "x-emoji": "💳",
      "type": "object",
      "required": [
        "code",
        "startDate",
        "isTrialPeriod",
        "planId",
        "status"
      ],
      "additionalProperties": false,
      "properties": {
        "id": {
          "description": "Unique identifier for the subscription.",
          "type": "string"
        },
        "code": {
          "description": "The unique subscription code.",
          "type": "string"
        },
        "startDate": {
          "description": "The start date of a subscription.",
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "description": "The end date of a subscription.\n\nAfter this date the subscription will become expired. If this is a recurring\nsubscription which has not been cancelled then the account holder will be\nautomatically charged and a new subscription will be activated.\n\nSome subscriptions may not have an end date, in which case this\nproperty will not exist.\n",
          "type": "string",
          "format": "date-time"
        },
        "isTrialPeriod": {
          "description": "True if a subscription is in its trial period, false if not.",
          "type": "boolean"
        },
        "planId": {
          "description": "The plan a subscription belongs to.",
          "type": "string"
        },
        "status": {
          "description": "The status of a subscription.",
          "type": "string",
          "enum": [
            "Active",
            "Cancelled",
            "Lapsed",
            "Expired",
            "None"
          ]
        }
      }
    },
    "SubscriptionDetails": {
      "x-emoji": "🔑",
      "type": "object",
      "required": [
        "itvData_purchased"
      ],
      "additionalProperties": false,
      "properties": {
        "itvData_purchased": {
          "description": "The ITV purchased subscription data.",
          "type": "object"
        }
      }
    },
    "Theme": {
      "x-emoji": "🎨",
      "type": "object",
      "required": [
        "colors",
        "type"
      ],
      "additionalProperties": false,
      "properties": {
        "colors": {
          "description": "The list of colors defined for the theme.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ThemeColor"
          }
        },
        "type": {
          "description": "The type of theme.",
          "type": "string",
          "enum": [
            "Background",
            "Text",
            "Custom"
          ]
        }
      }
    },
    "ThemeColor": {
      "x-emoji": "🎨",
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "additionalProperties": false,
      "properties": {
        "name": {
          "description": "The name of the theme color.",
          "type": "string"
        },
        "opacity": {
          "description": "The opacity of the theme color from 0 to 1.\n\nWhen omitted, no opacity level is to be applied to the color, or in other words we\nassume the color has an opacity of 1\n",
          "type": "number",
          "format": "float",
          "minimum": 0,
          "maximum": 1
        },
        "value": {
          "description": "The hex value of the theme color.",
          "type": "string"
        }
      }
    },
    "TokenRefreshRequest": {
      "type": "object",
      "required": [
        "token"
      ],
      "additionalProperties": false,
      "properties": {
        "token": {
          "description": "The token to refresh.",
          "type": "string"
        },
        "cookieType": {
          "description": "If you specify a cookie type then a content filter cookie will be returned\nalong with the token(s). This is only intended for web based clients which\nneed to pass the cookies to a server to render a page based on the user's\ncontent filters e.g subscription code.\n\nIf type `Session` the cookie will be session based.\nIf type `Persistent` the cookie will have a medium term lifespan.\nIf undefined no cookies will be set.\n",
          "type": "string",
          "enum": [
            "Session",
            "Persistent"
          ]
        }
      }
    },
    "UserRating": {
      "x-emoji": "⭐️",
      "type": "object",
      "required": [
        "itemId",
        "rating"
      ],
      "additionalProperties": false,
      "properties": {
        "itemId": {
          "type": "string",
          "description": "The id of the item rated."
        },
        "rating": {
          "description": "The rating out of 10",
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "maximum": 10
        }
      }
    },
    "Watched": {
      "x-emoji": "👀",
      "type": "object",
      "required": [
        "position",
        "firstWatchedDate",
        "lastWatchedDate"
      ],
      "additionalProperties": false,
      "properties": {
        "itemId": {
          "description": "The id of the item watched.",
          "type": "string"
        },
        "position": {
          "description": "The last playhead position watched for the item.",
          "type": "integer",
          "format": "int32"
        },
        "firstWatchedDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastWatchedDate": {
          "type": "string",
          "format": "date-time"
        },
        "isFullyWatched": {
          "description": "True - if the item is fully watched, False - otherwise.",
          "type": "boolean",
          "default": false
        }
      }
    }
  },
  "parameters": {
    "Device": {
      "name": "device",
      "description": "The type of device the content is targeting.",
      "in": "query",
      "default": "web_browser",
      "type": "string"
    },
    "FeatureFlags": {
      "name": "ff",
      "description": "The set of opt in feature flags which cause breaking changes to responses.\n\nWhile Rocket APIs look to avoid breaking changes under the active major version, the formats of responses\nmay need to evolve over this time.\n\nThese feature flags allow clients to select which response formats they expect and avoid breaking\nclients as these formats evolve under the current major version.\n\n### Flags\n\n- `all` - Enable all flags. Useful for testing. _Don't use in production_.\n- `idp` - Dynamic item detail pages with schedulable rows.\n- `ldp` - Dynamic list detail pages with schedulable rows.\n- `hb` - Hubble formatted image urls.\n- `rpt` - Updated resume point threshold logic.\n- `cas` - \"Custom Asset Search\", inlcude `customAssets` in search results.\n- `lrl` - Do not pre-populate related list if more than `max_list_prefetch` down the page.\n- `cd` - Custom Destination support.\n- `sis` - Specials into show chainplay.\n- `cwi` - Continue watching by item type.\n\nSee the `feature-flags.md` for available flag details.\n",
      "in": "query",
      "type": "array",
      "collectionFormat": "csv",
      "items": {
        "type": "string",
        "enum": [
          "all",
          "idp",
          "ldp",
          "hb",
          "rpt",
          "cas",
          "lrl",
          "cd",
          "sis",
          "cwi"
        ]
      }
    },
    "ItemType": {
      "name": "item_type",
      "description": "The item type to filter by. Defaults to unspecified.",
      "in": "query",
      "type": "string",
      "enum": [
        "movie",
        "show",
        "season",
        "episode",
        "program",
        "link",
        "trailer",
        "channel",
        "customAsset"
      ],
      "x-enumEmoji": {
        "movie": "🎬",
        "show": "📺",
        "season": "📺",
        "episode": "📺",
        "program": "🎟",
        "link": "🔗",
        "trailer": "🖥",
        "channel": "📺"
      }
    },
    "Language": {
      "name": "lang",
      "description": "Language code for the preferred language to be returned in the response.\n\nParameter value is case-insensitive and should be\n  - a valid 2 letter language code without region such as en, de\n  - or with region such as en_us, en_au\n\nIf undefined then defaults to 'en', unless the server has been configured\nwith a custom default.\n\nSee https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\n",
      "in": "query",
      "type": "string"
    },
    "ListOrder": {
      "name": "order",
      "description": "The list sort order, either 'asc' or 'desc'.",
      "in": "query",
      "default": "desc",
      "type": "string",
      "enum": [
        "asc",
        "desc"
      ]
    },
    "ListOrderBy": {
      "name": "order_by",
      "description": "What to order by.",
      "in": "query",
      "type": "string",
      "enum": [
        "a-z",
        "release-year",
        "date-added"
      ]
    },
    "MediaFileDelivery": {
      "name": "delivery",
      "description": "The video delivery type you require.",
      "in": "query",
      "required": true,
      "collectionFormat": "csv",
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "stream",
          "progressive",
          "download"
        ]
      }
    },
    "MediaFileFormats": {
      "name": "formats",
      "description": "The set of media file formats that the device supports, in the order of preference.\n\nWhen provided, Rocket API returns only media files in formats specified in this parameter. For each resolution, only the first media file of matching supported format is returned. Files of different resolutions may be of different supported media file formats.\n\n`external` value is reserved for project customizations where the real MIME type of the file on the specified URL is unknown at the time of ingestion.\n\nWhen not provided, Rocket API uses the legacy `User-Agent` header-based logic to find matching media files.\n",
      "in": "query",
      "type": "array",
      "collectionFormat": "csv",
      "items": {
        "type": "string",
        "enum": [
          "mp4",
          "mpd",
          "hls",
          "external"
        ]
      }
    },
    "MediaFileResolution": {
      "name": "resolution",
      "description": "The maximum resolution the device to playback the media can present.",
      "required": true,
      "in": "query",
      "type": "string",
      "enum": [
        "HD-4K",
        "HD-1080",
        "HD-720",
        "SD",
        "External"
      ]
    },
    "Segments": {
      "name": "segments",
      "description": "The list of segments to filter the response by.",
      "in": "query",
      "type": "array",
      "collectionFormat": "csv",
      "items": {
        "type": "string"
      }
    },
    "Subscription": {
      "name": "sub",
      "description": "The active subscription code.",
      "in": "query",
      "type": "string"
    }
  }
}